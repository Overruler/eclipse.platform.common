<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
    <link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css">
    <title>Debugging</title>
  </head>
  <body>
    
<h1> Debugging <br>
</h1>
<table border="0" cellpadding="10" cellspacing="0" width="500">
  <tr> 
    <td width="30%" valign="top" align="right"><div align="right"> <b>Stop in Main</b> </div></td>
    <td width="70%" valign="top" align="left">
      <p>You can use <strong>Stop in main&nbsp;</strong>in a Java Application 
        launch configuration to cause your program to stop at the first executable 
        line of the main method when you run it under debug mode.</p>
      <p><img src="images/stop-in-main.gif" width="478" height="202"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Conditional<br>
      breakpoints</b></td>
    <td width="70%" valign="top" align="left">You can use conditional breakpoints 
      in <strong> Breakpoint Properties... </strong>to control when a breakpoint 
      actually halts execution.&nbsp; You can specify whether you want the breakpoint 
      to suspend execution only when the condition is true, or when the condition 
      value changes. 
      <p><img src="images/conditional-breakpoint-property.gif" width="351" height="172"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Disabling<br>
      breakpoints</b></td>
    <td width="70%" valign="top" align="left">If you find yourself frequently 
      adding and removing a breakpoint in the same place, consider disabling the 
      breakpoint when you don't need it (using <strong>Disable Breakpoint </strong>in 
      the breakpoint context menu or the <strong>Breakpoints view</strong>) and 
      enabling it when needed again.&nbsp; 
      <p><img src="images/breakpoint-context-menu.gif" width="411" height="124"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Variable values in hover help</b></td>
    <td width="70%" valign="top" align="left">When a thread is suspended and the 
      cursor is placed over a variable in the Java editor, the value of that variable 
      is displayed as hover help. 
      <p><img src="images/variable-hover.gif" width="400" height="104"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Controlling<br>
      your console</b></td>
    <td width="70%" valign="top" align="left">Output displayed in the console 
      can be locked to a specific process via a drop-down menu in the Console 
      view toolbar. There's also a new scroll lock button that stops the console 
      from automatically scrolling as new output is appended. 
      <p><img border="0" src="images/selective-output.gif" width="459" height="140"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><div aligh="right"> <b>Creating watch items</b> </div></td>
    <td width="70%" valign="top" align="left">The Java debugger can create watch 
      items from the Java editor by selecting an expression and using the <b>Watch</b> 
      action (available in the context menu, and in the <b>Run</b> menu). As well, 
      a watch item can be created by selecting a variable and using the <b>Watch</b> 
      action.</td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Step filters</b></td>
    <td width="70%" valign="top" align="left">Step filters prevent the debugger 
      from suspending in specified classes and packages when stepping through 
      code. Step filters are established in Window&gt;Preferences&gt;Java&gt;Debug&gt;Step 
      Filtering. Step filters are in effect when the <b>Step With Filters</b> 
      action (on the debug toolbar and menu) is invoked. In the Debug view, the 
      selected stack frame's package or declaring type can be quickly added to 
      the list of filters by selecting <b>Filter Type</b> or <b>Filter Package</b> 
      from the stack frame's context menu.</td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Editing<br>
      launch<br>
      configurations</b></td>
    <td width="70%" valign="top" align="left">Holding down the Control key and 
      making a selection from the <b>Run</b> or <b>Debug</b> drop-down menu opens 
      the associated launch configuration for editing. The launch configuration 
      can also be opened from the context menu associated with any item in the 
      Debug view.</td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Word wrap in<br>
      Variables<br>
      view</b></td>
    <td width="70%" valign="top" align="left">The details area of the debugger's 
      <b>Variables</b> and <b>Expressions</b> views supports word wrap, available 
      from the view drop-down menu. 
      <p><img src="images/variables-details-pane.gif" width="352" height="218"></p>
    </td>
  </tr>
  <tr> 
    <td width="30%" valign="top" align="right"><b>Stack trace<br>
      hyperlinks</b></td>
    <td width="70%" valign="top" align="left">
      <p>Java stack traces in the console now appear with hyperlinks. When you 
        place the mouse over a line in a stack trace, the pointer changes to the 
        hand and the stack trace is underlined. Pressing the mouse button opens 
        the associated Java source file and positions the cursor at the corresponding 
        line.</p>
      <p><img border="0" src="images/stack-trace-hyperlink.gif" width="416" height="133"></p>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
<p><img border="0" src="../images/ngrelc.gif" alt="Related concepts" width="159" height="27"><br>
  <a href="../concepts/concepts-10.htm">Debugger</a><br>
  <a href="../concepts/concepts-7.htm">Java editor</a></p>
	<p>
      <a href="../hglegal2002.htm"><img src="../images/ngibmcpy2002.gif" alt="Copyright IBM Corporation 2000, 2002. All Rights Reserved." border="0" width="324" height="14"></a>
	</p>  
  </body>
</html>

