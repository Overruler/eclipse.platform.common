<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">
<link rel="STYLESHEET" href="../book.css" charset="ISO-8859-1" type="text/css">
<title>Java development process</title>
<link rel="stylesheet" type="text/css" href="../book.css">
</head>
<body>
<h2> JDT Core packages</h2>
<p>These are the JDT Core packages which give you access to the Java model objects.&nbsp;</p>
<p> The following roadmap outlines the major functions of the JDT Core packages:</p>
<ul>
  <li><a href="../reference/api/org/eclipse/jdt/launching/package-summary.html"><b> 
    org.eclipse.jdt.launching </b></a> provides classes for launching Java runtimes 
    from the platform.&nbsp; <b><a href="../reference/api/org/eclipse/jdt/launching/JavaRuntime.html"> 
    JavaRuntime</a> </b> implements static methods to access registered VMs and 
    compute runtime classpaths and source lookup paths.&nbsp; A family of VM's 
    (such as the JDK) is represented by the <a href="../reference/api/org/eclipse/jdt/launching/IVMInstallType.html"><b> 
    IVMInstallType</b></a> class. <a href="../reference/api/org/eclipse/jdt/launching/IVMInstall.html"><b> 
    IVMInstall</b></a> represents particular installations within a family.&nbsp; 
    The <a href="../reference/api/org/eclipse/jdt/launching/IVMRunner.html"><b> 
    IVMRunner</b></a> is used to start a particular Java VM and register its processes 
    with the debug plug-in.
  </li>
  <li><a href="../reference/api/org/eclipse/jdt/debug/core/package-summary.html"><b> 
    org.eclipse.jdt.debug</b></a> supports a Java debug model based on JDI/JDWP 
    that can be used for controlling a Java program under debug.
  </li>
  <li><b><a href="../reference/api/org/eclipse/jdt/core/dom/package-summary.html"> 
    org.eclipse.jdt.core.dom</a> </b> supports Abstract Syntax Trees (AST) that 
    can be used for examining the structure of a compilation unit down to the 
    statement level.
  </li>
  <li><b><a href="../reference/api/org/eclipse/jdt/core/search/package-summary.html"> 
    org.eclipse.jdt.core.search</a> </b> supports searching the workspace's Java 
    elements that match a particular description.&nbsp; <a href="../reference/api/org/eclipse/jdt/core/search/SearchEngine.html"><b> 
    SearchEngine</b></a> allows you to set up searches in the workspace. You can 
    search for particular patterns inside a Java element. You can also scope the 
    search according to several predefined search types: searching for declarations 
    of the pattern, implementors of the pattern, references to the pattern, or 
    all occurrences of the pattern.
  </li>
  <li><a href="../reference/api/org/eclipse/jdt/core/jdom/package-summary.html"><b> 
    org.eclipse.jdt.core.jdom</b></a> supports a Java Document Object Model (DOM) 
    that can be used for walking the structure of a Java compilation unit.
  </li>
  <li><a href="../reference/api/org/eclipse/jdt/core/eval/package-summary.html"><b> 
    org.eclipse.jdt.core.eval</b></a> supports the evaluation of code snippets 
    in a scrapbook or inside the debugger.</li>
</ul>
<p><a href="../hglegal2002.htm"><img src="../ngibmcpy2002.gif" alt="Copyright IBM Corporation 2000, 2002. All Rights Reserved." border="0" width="324" height="14"> 
  </a> </p>
</body>
</html>
