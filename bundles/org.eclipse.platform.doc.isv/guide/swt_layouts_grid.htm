<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
GridLayout
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">


<H3>
GridLayout</H3>
<P >
<a href="../reference/api/org/eclipse/swt/layout/GridLayout.html"><b>
GridLayout</b></a> is the one of the more powerful (and more complex) layout. <a href="../reference/api/org/eclipse/swt/layout/GridLayout.html"><b>
GridLayout</b></a> lays out widgets in a grid, providing many configurable parameters that control the behavior of the grid rows and columns when the composite is resized.</P>
<P >
The <a href="../reference/api/org/eclipse/swt/layout/GridLayout.html"><b>
GridLayout</b></a> defines API that controls the overall strategy of the layout. The most important attribute is
<b>numColumns</b>, which determines the horizontal size of the grid. Typically you decide on this value when you first design your window's appearance. The order of the widgets in the grid is the same as the order in which you create them. To change the order of the widgets in the grid, you can use the
<b><a href="../reference/api/org/eclipse/swt/widgets/Control.html"> Control</a></b> methods
<b> moveAbove(Control)</b> and <b> moveBelow(Control).</b> These methods allow widgets to be inserted before or after each other in the layout. (The &quot;above&quot; and &quot;below&quot; refer to the widget Z ordering, not the location in the grid itself.)</P>
<P >
The following table summarizes the configurable parameters for a <a href="../reference/api/org/eclipse/swt/layout/GridLayout.html"><b>
GridLayout</b></a>.</P>
<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
Attribute</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
Description</P>
</TH>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
horizontalSpacing</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Number of pixels between the right edge of one cell and the left edge of its neighboring cell.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
makeColumnsEqualWidth</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Specifies whether all columns should be forced to the same width.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
marginWidth</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Number of pixels used for margin on the right and left edge of the grid.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
marginHeight</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Number of pixels used for margin on the top and bottom edge of the grid.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
numColumns</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Number of columns that should be used to make the grid.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
verticalSpacing</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Number of pixels between the bottom edge of one cell and the top edge of its neighboring cell.</P>
</TD>
</TR>
</TABLE>
<P ><a href="../reference/api/org/eclipse/swt/layout/GridLayout.html"><b>
GridLayout</b></a> supports many other layout parameters for each widget in the grid. These properties are specified in
a <a href="../reference/api/org/eclipse/swt/layout/GridData.html"><b>GridData</b></a>
 object. You must set a <a href="../reference/api/org/eclipse/swt/layout/GridData.html"><b> GridData</b></a>
as the <b> layoutData</b> for each widget in the grid.</P>
<P >
The <a href="../reference/api/org/eclipse/swt/layout/GridData.html"><b> GridData</b></a> class defines style constants that
let you specify commonly used combinations of layout parameters in the
<a href="../reference/api/org/eclipse/swt/layout/GridData.html"><b> GridData</b></a>
constructor. You can also set these attributes individually using the public methods in
<a href="../reference/api/org/eclipse/swt/layout/GridData.html"><b> GridData</b></a>.</P>
<P >
You can achieve some highly dynamic and complex layouts using the <a href="../reference/api/org/eclipse/swt/layout/GridData.html"><b> GridData</b></a>. Tweaking these values for different widgets in the grid can produce many different combinations of layouts. Even the most complex dialog layouts can be specified using the
<a href="../reference/api/org/eclipse/swt/layout/GridData.html"><b> GridData</b></a>. The ability to allow widgets to span across cells produces many layouts that don't even look like a grid.</P>
<P >
The following table summarizes the configurable parameters for <a href="../reference/api/org/eclipse/swt/layout/GridData.html"><b> GridData</b></a>.&nbsp;&nbsp;
See&nbsp;<a href="http://www.eclipse.org/articles/Understanding%20Layouts/Understanding%20Layouts.htm">Understanding
Layouts in SWT</a>
for further description and example screen captures using the various grid
parameters.</P>
<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
Attribute</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
Description</P>
</TH>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
grabExcessHorizontalSpace</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Specifies whether a cell should grow to use any extra horizontal space available in the grid. After the cell sizes in the grid are calculated based on the widgets and
their grid data, any extra space remaining in the Composite will be allocated to those cells that grab excess space.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
grabExcessVerticalSpace</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Specifies whether a cell should grow to use any extra vertical space available in the grid.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
heightHint</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Specifies a minimum height for the widget (and therefore for the row that contains it).</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
horizontalAlignment</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Can be one of <b>BEGINNING</b>, <b>CENTER</b>,
<b>END</b>, <b>FILL</b>. <b> FILL</b> means that the widget will be sized to take up the entire width of its grid cell.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
horizontalIndent</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Number of pixels between the widget and the left edge of its grid cell.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
horizontalSpan</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Specifies the number of columns in the grid that the widget should span. By default, a widget takes up one cell in the grid. It can take additional cells horizontally by increasing this value.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
verticalAlignment</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Can be one of <b>BEGINNING</b>, <b>CENTER</b>,
<b>END</b>, <b>FILL</b>. <b> FILL</b> means that the widget will be sized to take up the entire height of its grid cell.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
verticalSpan</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Specifies the number of rows in the grid that the widget should span. By default, a widget takes up one
cell in the grid. It can take additional cells vertically by increasing this value.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
widthHint</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Specifies a minimum width for the widget (and therefore the column that contains it).</P>
</TD>
</TR>
</TABLE>


<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corp. and others 2000,2002."width="250" height="12"></a></p>

</BODY>
</HTML>
