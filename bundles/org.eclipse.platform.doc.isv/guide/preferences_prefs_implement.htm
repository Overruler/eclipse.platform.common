<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Implementing a preference page
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<h3>Implementing a preference page</h3>

<H4>
Defining the page</H4>
<P >
Implementing a preference page is similar to creating a page for a wizard. The preference page supplies a
<b> createContents</b> method that creates the SWT controls representing the page content and adds listeners for any events of interest. The page is responsible for creating and returning the composite that will parent all of the controls in the page.&nbsp;
The following snippet shows the highlights:</P>
<font color='#4444CC'><pre>
protected Control createContents(Composite parent)
{
	...
	//composite_textField &lt;&lt; parent
	Composite composite_textField = createComposite(parent, 2);
	Label label_textField = createLabel(composite_textField, MessageUtil.getString(&quot;Text_Field&quot;));	 
	textField = createTextField(composite_textField);
	pushButton_textField = createPushButton(composite_textField, MessageUtil.getString(&quot;Change&quot;)); 

	//composite_tab &lt;&lt; parent
	Composite composite_tab = createComposite(parent, 2);
	Label label1 = createLabel(composite_tab, MessageUtil.getString(&quot;Radio_Button_Options&quot;)); 

	//
	tabForward(composite_tab);
	//radio button composite &lt;&lt; tab composite
	Composite composite_radioButton = createComposite(composite_tab, 1);
	radioButton1 = createRadioButton(composite_radioButton, MessageUtil.getString(&quot;Radio_button_1&quot;)); 
	radioButton2 = createRadioButton(composite_radioButton, MessageUtil.getString(&quot;Radio_button_2&quot;)); 
	radioButton3 = createRadioButton(composite_radioButton, MessageUtil.getString(&quot;Radio_button_3&quot;)); 


	//composite_tab2 &lt;&lt; parent
	Composite composite_tab2 = createComposite(parent, 2);
	Label label2 = createLabel(composite_tab2, MessageUtil.getString(&quot;Check_Box_Options&quot;)); //$NON-NLS-1$

	//
	tabForward(composite_tab2);
	//composite_checkBox &lt;&lt; composite_tab2
	Composite composite_checkBox = createComposite(composite_tab2, 1);
	checkBox1 = createCheckBox(composite_checkBox, MessageUtil.getString(&quot;Check_box_1&quot;)); 
	checkBox2 = createCheckBox(composite_checkBox, MessageUtil.getString(&quot;Check_box_2&quot;)); 
	checkBox3 = createCheckBox(composite_checkBox, MessageUtil.getString(&quot;Check_box_3&quot;)); 

	initializeValues();

	return new Composite(parent, SWT.NULL);
}</pre></font>
<P >
 Most of the code in this method is concerned with creating and laying out the controls, so we won't dissect it here.&nbsp;
Here is what the corresponding page looks like:</P>
<P >
<img border="0" src="images/readmepreferences.jpg" width="606" height="532" alt="Readme tool preferences page"></P>
<P >
The other primary responsibility of a preference page is to react to the <b> performOk</b> message. Typically, this method
updates and stores the user preferences and, if necessary, updates any other plug-in objects to reflect the change in preferences.</P>
<P >
Preference pages should override the <b> doGetPreferenceStore()</b> method to return a preference store for storing their values. </P>


<H4>
Plug-in preference store</H4>
<P >
Preference stores are similar in nature to dialog settings. In <a HREF="dialogs_settings.htm" CLASS="XRef">Dialog settings</a>, we saw how the
<b><a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html"> AbstractUIPlugin</a></b> class maintains dialog settings during the lifetime of a plug-in. The same strategy is employed for user preferences. Your plug-in can add entries to a preference store and update the values as the user changes the settings in your preferences page. The platform will take care of saving these values in your plug-in's
working directory and initializing the preference store from the saved settings.</P>
<P >
The following code in the <b> ReadmePreferencePage</b> obtains the preference store for the
<b>ReadmePlugin</b>.</P>
<font color='#4444CC'><pre>
   protected IPreferenceStore doGetPreferenceStore() {
      return ReadmePlugin.getDefault().getPreferenceStore();
   }
</pre></font>
<P >
Because <b> ReadmePlugin</b> extends the <b><a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html"> AbstractUIPlugin</a></b> class, it automatically inherits a preference store. This preference store is initialized from a preferences file stored in the
plug-in's directory.&nbsp; The only thing the <b> ReadmePlugin</b> has to do is implement a method that initializes the
preference controls to their default values. These values are used the first time the preference page is shown or when the user presses the
<b>Defaults</b> button in the preferences page.</P>
<font color='#4444CC'><pre>
protected void initializeDefaultPreferences(IPreferenceStore store) {
	// These settings will show up when Preference dialog
	// opens up for the first time.
	store.setDefault(IReadmeConstants.PRE_CHECK1, true);
	store.setDefault(IReadmeConstants.PRE_CHECK2, true);
	store.setDefault(IReadmeConstants.PRE_CHECK3, false);
	store.setDefault(IReadmeConstants.PRE_RADIO_CHOICE, 2);
	store.setDefault(IReadmeConstants.PRE_TEXT, MessageUtil.getString(&quot;Default_text&quot;)); //$NON-NLS-1$
}</pre></font>


<i><blockquote>
Note:&nbsp; If there are no preferences saved for a plug-in, the plug-in will get an empty preference
store.</blockquote></i>


<H4>
Retrieving and saving preferences</H4>
<P >
Once you've associated your plug-in's preference store with your preference page, you can implement the logic for retrieving and saving the preferences.</P>
<P >
Preference pages are responsible for initializing the values of their controls using the preferences settings from the preference store. This
process is similar to initializing dialog control values from dialog settings. The
<b> ReadmePreferencePage</b> initializes all of its controls in a single method,
<b>initializeValues</b>, which is called from its <b> createContents</b> method.</P>
<font color='#4444CC'><pre>private void initializeValues() {
	IPreferenceStore store = getPreferenceStore();
	checkBox1.setSelection(store.getBoolean(IReadmeConstants.PRE_CHECK1));
	checkBox2.setSelection(store.getBoolean(IReadmeConstants.PRE_CHECK2));
	checkBox3.setSelection(store.getBoolean(IReadmeConstants.PRE_CHECK3));
	...
}</pre></font>
<P >
When the <b>OK</b> (or <b>Apply</b>) button is pressed, the current values of the controls on the preference page should be stored back into the
preference store. The
<b> ReadmePreferencePage</b> implements this logic in a separate method,
<b>storeValues</b>.</P>
<font color='#4444CC'><pre>
private void storeValues() {
	IPreferenceStore store = getPreferenceStore();
	store.setValue(IReadmeConstants.PRE_CHECK1, checkBox1.getSelection());
	store.setValue(IReadmeConstants.PRE_CHECK2, checkBox2.getSelection());
	store.setValue(IReadmeConstants.PRE_CHECK3, checkBox3.getSelection());
	...
}</pre></font>
<P >
When the user presses the <b>Defaults</b> button, the platform will restore all preference store values to the default values specified in the plug-in class. However, your preference page is responsible for reflecting these default values
in the controls on the preference page. The
<b> ReadmePreferencePage</b> implements this in <b>initializeDefaults</b>.</P>
<font color='#4444CC'><pre>
   private void initializeDefaults() {
      IPreferenceStore store = getPreferenceStore();
      checkBox1.setSelection(store.getDefaultBoolean(IReadmeConstants.PRE_CHECK1));
      checkBox2.setSelection(store.getDefaultBoolean(IReadmeConstants.PRE_CHECK2));
      checkBox3.setSelection(store.getDefaultBoolean(IReadmeConstants.PRE_CHECK3));
      ...
   }</pre><pre>
</font><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corp. and others 2000,2002."width="250" height="12"></a></pre>

</BODY>
</HTML>
