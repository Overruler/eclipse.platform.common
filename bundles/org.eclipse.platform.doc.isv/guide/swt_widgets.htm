<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Widgets
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
Widgets</H2>
<P >
SWT includes many rich features, but a basic knowledge of the system's core -
<b>widgets</b>, <b>layouts</b>, and <b>events </b>- is all that is needed to
implement useful and robust applications.</P>

<H3>
Widget application structure</H3>
<P >When you are contributing UI elements using platform workbench
extensions,&nbsp; the mechanics of starting up SWT are handled for you by the
workbench.</P>
<P >If you are writing an SWT application from scratch (outside of the
workbench), you must understand more about SWT's application structure.</P>
<P >
A typical stand-alone SWT application has the following structure:</P>
<ul>
  <li>
    
Create a <b><a href="../reference/api/org/eclipse/swt/widgets/Display.html">Display</a></b>
which represents an SWT session.</li>
  <li>
    
Creates one or more <b><a href="../reference/api/org/eclipse/swt/widgets/Shell.html"> Shell</a>s</b> which
serve as the main window(s) for the application.</li>
  <li>
    
Create any other widgets needed inside the shell.</li>
  <li>
    
Initialize the sizes and other necessary state for the widgets. Register listeners
for widget events that need to be handled.</li>
  <li>
    
Open the shell window.</li>
  <li>
    
Run the event dispatching loop until an exit condition occurs (typically when
    the main shell window is closed by the user).</li>
  <li>
    
Dispose the display.</li>
</ul>
<P >
The following code snippet is adapted from the <b> org.eclipse.swt.examples.helloworld.HelloWorld2</b> application. Since the application only displays the string &quot;Hello World,&quot; it does not need to register for any widget events.</P>
<font color='#4444CC'><pre>
   public static void main (String [] args) {
      Display display = new Display ();
      Shell shell = new Shell (display);
      Label label = new Label (shell, SWT.CENTER);
      label.setText (&quot;Hello_world&quot;);
      label.setBounds (shell.getClientArea ());
      shell.open ();
      while (!shell.isDisposed ()) {
         if (!display.readAndDispatch ()) display.sleep ();
      }
      display.dispose ();
   }
</pre></font>

<H4>
Display</H4>
<P >
The <b><a href="../reference/api/org/eclipse/swt/widgets/Display.html">Display</a></b>
represents the connection between SWT and the underlying platform's GUI system. Displays are primarily used to manage the platform event loop and
control communication between the UI thread and other threads. (See
<a HREF="swt_threading.htm" CLASS="XRef"> Threading issues for clients</a> for a complete discussion of UI threading issues.)</P>
<P >
For most applications, you can follow the pattern used above. You must create a display before creating any windows, and you must dispose of the display when your shell is closed. You don't need to think much more about the display unless you are designing a multi-threaded application.</P>


<H4>
Shell</H4>
<P >
A <b><a href="../reference/api/org/eclipse/swt/widgets/Shell.html">Shell</a></b>
is a&nbsp; &quot;window&quot; managed by the OS platform window manager. Top level shells are those that are created as a child of the display. These windows are the windows that users move, resize,
minimize, and maximize while using the application. Secondary shells are those that are created as a child of another shell. These windows are typically used as dialog windows or other transient windows that only exist in the context of another window.</P>


<H4>
Parents and children</H4>
<P >
All widgets that are not top level shells have a parent. Top level shells do not
have a parent, but they are all created in association with a particular <b><a href="../reference/api/org/eclipse/swt/widgets/Display.html">Display</a></b>.&nbsp;
You can access this display using <b>getDisplay()</b>.&nbsp;
All other widgets are created as descendants (direct or indirect) of top level shells.</P>
<P >
<b><a href="../reference/api/org/eclipse/swt/widgets/Composite.html">
Composite</a></b> widgets are widgets that can have children.</P>
<P >
When you see an application window, you can think of it as a widget tree, or
hierarchy, whose root is the shell. Depending on the complexity of the application, there may be a single child of the shell, several children, or nested layers of composites with children.</P>



<H3>
Widget life cycle</H3>
<P >
When your application creates a widget, SWT immediately creates the underlying platform widget. This eliminates the need for code that operates differently depending on whether the underlying OS widget exists. It also allows a majority of the widget's data to be kept in the platform layer rather than replicated in the toolkit. This means that the toolkit's concept of a widget lifecycle must conform to the rules of the underlying GUI system.</P>

<H4>
Widget creation</H4>
<P >
Most GUI platforms require you to specify a parent when you create a widget. Since SWT creates a platform widget as soon as you create a toolkit widget, the parent widget must be specified in the constructor for the widget.</P>


<H4>
Style bits</H4>
<P >
Some widget properties must be set by the OS at the time a widget is created and cannot be changed afterward. For example, a list may be single or multi-selection, and may or may not have scroll bars. </P>
<P >
These properties, called <b>styles</b>, must be set in the constructor. All widget constructors take an
<b> int</b> argument that specifies the bitwise <b> OR</b> of all desired styles. In some cases, a particular style is considered a hint, which means that it may not be available on all platforms, but will be gracefully ignored on platforms that do not support it.</P>
<P >
The style constants are located in the <b><a href="../reference/api/org/eclipse/swt/SWT.html"> SWT</a></b> class as public static fields. A list of applicable constants for each
widget class is contained in the
API Reference for <b><a href="../reference/api/org/eclipse/swt/SWT.html">SWT</a></b>. </P>


<H4>
Resource disposal</H4>
<P >
The OS platforms underneath SWT require explicit allocation and freeing of OS resources. In keeping with the SWT design philosophy of reflecting the platform application structure in the widget toolkit, SWT requires
that you explicitly free any OS resources that you have allocated. In SWT, the <b>dispose()
</b>method is used to free resources associated with a particular toolkit object.</P>
<P >
The rule of thumb is that if you create the object, you must dispose of it. Here are some specific ground rules that further explain this philosophy:</P>
<ul>
  <li>
    
If you create a widget or graphic object using a constructor, you must dispose of it manually when you are finished using it.</li>
  <li>
    
If you get a widget or graphic object without using a constructor, you must not dispose of it manually since you did not allocate it.</li>
  <li>
    
If you pass a reference to your widget or graphic object to another object, you must take care not to dispose of it while it is still being used. (We saw this rule in practice earlier in
<a HREF="jface_resources.htm#jface_resources_patterns" CLASS="XRef"> Plug-in patterns for using images</a>.)</li>
  <li>
    
When the user closes a <a href="../reference/api/org/eclipse/swt/widgets/Shell.html"><b>Shell</b></a>, the shell and all of its
child widgets are recursively disposed. In this case, you do not need to dispose of the widgets themselves. However, you must free any graphics resources allocated in conjunction with those widgets.</li>
  <li>
    
If you create a graphic object for use during the lifetime of one of your widgets, you must dispose of the
graphic object when the widget is disposed. This can be done by registering a dispose listener for your widget and freeing the
graphic object when the <b> dispose</b> event is received.</p>
  </li>
</ul>


    <p align="left" >
There is one exception to these rules.&nbsp; Simple data objects, such as <b><a href="../reference/api/org/eclipse/swt/graphics/Rectangle.html"> Rectangle</a></b> and
<b><a href="../reference/api/org/eclipse/swt/graphics/Point.html">Point</a></b>, do not use operating system resources. They do not have a
<b> dispose()</b> method and you do not have to free them.&nbsp;
If in doubt, check the javadoc for a particular class.</p>


<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="250" height="12"></a></p>


</BODY>
</HTML>
