<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>org.eclipse.ui.popupMenus</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H3>
org.eclipse.ui.popupMenus</H3>

<P >
The <b><a href="../reference/extension-points/org_eclipse_ui_popupMenus.html"> org.eclipse.ui.popupMenus</a></b> extension
point allows a plug-in to contribute to the popup menus of other
views and editors.</P>
<P >
You can contribute an action to a specific popup menu by its id (<b>viewerContribution</b>), or you can contribute
an action for an object
type (<b>objectContribution</b>).&nbsp;</P>
<ul>
  <li>A <b>viewerContribution</b> will cause the menu
    item to appear in the popup menu of a view or editor specified by id in the
    markup.&nbsp;&nbsp;</li>
  <li>An <b>objectContribution</b> will cause the menu
    item to appear in all popup menus for views or editors that have objects of
    the specified type selected.</li>
</ul>
<P >
The readme tool defines an <b>objectContribution</b>. The markup looks like this.</P>
<font color='#4444CC'><pre>
   &lt;extension point = &quot;org.eclipse.ui.popupMenus&quot;&gt;
      &lt;objectContribution
         id=&quot;org.eclipse.ui.examples.readmetool&quot;
         objectClass=&quot;org.eclipse.core.resources.IFile&quot;
         nameFilter=&quot;*.readme&quot;&gt;
         &lt;action id=&quot;org.eclipse.ui.examples.readmetool.action1&quot;
            label=&quot;Show Readme Action&quot;
            icon=&quot;icons/basic/ctool16/openbrwsr.gif&quot;
            menuBarPath=&quot;additions&quot;
            helpContextId=&quot;org.eclipse.ui.examples.readmetool.open_browser_action_context&quot;
            class=&quot;org.eclipse.ui.examples.readmetool.PopupMenuActionDelegate&quot; 
            enablesFor=&quot;1&quot;&gt;
         &lt;/action&gt;
      &lt;/objectContribution&gt;
   &lt;/extension&gt;
</pre></font>
<P >
The action &quot;Show Readme Action&quot; is contributed for the object class <a href="../reference/api/org/eclipse/core/resources/IFile.html"><b>IFile</b></a>. This means that any view containing
<a href="../reference/api/org/eclipse/core/resources/IFile.html"><b>IFile</b></a>
objects will show the contribution if <a href="../reference/api/org/eclipse/core/resources/IFile.html"><b>IFile</b></a>
objects are selected. We see that the selection criteria is restricted further with a name filter
(<b>nameFilter=&quot;*.readme&quot;</b>) and for single selections (<b>enablesFor=&quot;1&quot;</b>). As we've discussed before, the registration of this menu does not run any code from our plug-in until the menu item is actually selected. </P>
<P >
When the menu item is selected, the workbench will run the specified class.&nbsp;
Since the popup is declared as an <b>objectContribution</b>,
the supplied class must implement <b><a href="../reference/api/org/eclipse/ui/IObjectActionDelegate.html">IObjectActionDelegate</a></b>.&nbsp;</P>
<P >
The action is implemented in <b>PopupMenuActionDelegate</b>.&nbsp;&nbsp;</P>
<font color='#4444CC'><pre>
   public void run(IAction action) {
      MessageDialog.openInformation(
         this.part.getSite().getShell(),
         &quot;Readme Example&quot;,
         &quot;Popup Menu Action executed&quot;);
   }
</pre></font>
<P >
We can see the popup menu contribution when we select a readme file from the resource navigator.</P>

<img border="0" src="images/readmepopupmenu.jpg" width="618" height="477">
<P >
The other type of pop-up menu contribution is called a <b>viewerContribution</b>. </P>
<i><blockquote>
Note:&nbsp; The name <b> viewerContribution</b> is somewhat misleading, as it does not relate to JFace viewers. A better name would
be <b>popupMenuContribution</b>  .</blockquote></i>
<P >
A viewer contribution is used to contribute to a specific view or editor's popup menu using its id. The following markup shows how a plug-in could register a specific action in the workbench task list popup menu.</P>
<font color='#4444CC'><pre>
   &lt;extension point=&quot;org.eclipse.ui.popupMenus&quot;&gt;
      &lt;viewerContribution
         id=&quot;com.example.C2&quot;
         targetID=&quot;org.eclipse.ui.views.TaskList&quot;&gt;
         &lt;action
            id=&quot;com.example.showExample&quot;
            label=&quot;&amp;amp;Show Example&quot;
            menubarPath=&quot;additions&quot;
            icon=&quot;icons/showExample.gif&quot;
            helpContextId=&quot;com.example.show_action_context&quot;
            class=&quot;com.example.actions.ExampleShowActionDelegate&quot;&gt;
         &lt;/action&gt;
      &lt;/viewerContribution&gt;
   &lt;/extension&gt;
</pre></font>
<P >
If the extension is a <b>viewerContribution</b>, the
supplied class must implement the
<b><a href="../reference/api/org/eclipse/ui/IEditorActionDelegate.html"> IEditorActionDelegate</a></b> or
<b><a href="../reference/api/org/eclipse/ui/IViewActionDelegate.html"> IViewActionDelegate</a></b> interface, depending on whether the
action is contributed to an editor's or view's popup menu.&nbsp;</P>


<P >
In this example, we specify the <b> id</b> of the popup and
the <b>path</b> within the popup for our contribution.</P>


<i><blockquote>
Note:&nbsp; The interfaces required for a <b>viewerContribution</b>
to the <b> popupMenus</b> extension
point are the same as those required by the <b> viewActions</b> and
<b> editorActions</b> extension points. If you want to contribute the same action to the popup menu and the local menu of a view or editor, you can use the same class for both extensions.</blockquote></i>


<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="250" height="12"></a></p>


</BODY>
</HTML>
