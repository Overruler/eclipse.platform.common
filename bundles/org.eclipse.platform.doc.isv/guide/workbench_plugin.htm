<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
The plug-in class
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
The plug-in class</H2>
<P >
So far, we've been looking at the different extensions that are provided by the readme tool. Let's look at the general definition of the readme tool plug-in.</P>

<H3>
Plug-in definition</H3>
<P >
The readme tool plug-in is defined at the top of the <b> plugin.xml</b> file.</P>
<font color='#4444CC'><pre>
   
&lt;plugin
   name = &quot;%Plugin.name&quot;
   id = &quot;org.eclipse.ui.examples.readmetool&quot;
   version = &quot;2.0.0&quot;
   provider-name = &quot;%Plugin.providerName&quot;
   class=&quot;org.eclipse.ui.examples.readmetool.ReadmePlugin&quot;&gt;

   &lt;requires&gt;
      &lt;import plugin=&quot;org.eclipse.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.core.resources&quot;/&gt;
   &lt;/requires&gt;

   &lt;runtime&gt;
     &lt;library name=&quot;readmetool.jar&quot;/&gt; 
   &lt;/runtime&gt;
   ...</pre></font>
<P >
The plug-in definition includes the <b>name</b>, <b>id,</b> <b>version</b>, and <b>provider</b>
<b>name</b> of the plug-in. We saw most of these parameters before in our hello world plug-in. The readme tool also defines a specialized plug-in class,
<b>ReadmePlugin</b>. </P>
<P >
The workbench UI and resources plug-ins are listed as required plug-ins, which
informs the platform of the readme tool's dependencies. </P>
<P >
Finally, the name of the jar file is provided. File names specified in a <b> plugin.xml</b> file are relative to the
plug-in's directory.</P>


<H3>
AbstractUIPlugin</H3>
<P >
The<b> ReadmePlugin</b> class represents the readme
tool plug-in and manages the life cycle of the plug-in.&nbsp; As we saw in the
Hello World example, you don't have to specify a plug-in class.&nbsp; The
platform will provide one for you.&nbsp; In this case, our plug-in needs to
initialize UI related data when it starts up.&nbsp; The platform class <a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html"><b>AbstractUIPlugin</b></a>
provides a structure for managing UI resources and is extended by <b>
ReadmePlugin</b>.</P>
<P >
<a href="../reference/api/org/eclipse/ui/plugin/AbstractUIPlugin.html"><b>AbstractUIPlugin</b></a>
 uses the generic startup and shutdown methods to manage images, dialog settings, and a preference store during the lifetime of the plug-in.&nbsp;
We'll look at the specifics of the <b> ReadmePlugin</b> class when we work with dialogs and preferences.</P>

<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corp. and others 2000,2002."width="250" height="12"></a></p>

</BODY>
</HTML>
