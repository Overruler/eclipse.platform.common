<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Running Ant build files programmatically
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<h2>
Running Ant build files programmatically</h2>
<p>
The Ant support built into Eclipse allows plug-ins to programmatically run Ant build files.
This is done via the <a href="../reference/api/org/eclipse/ant/core/AntRunner.html"><b>AntRunner</b></a> 
class included in the <b> org.eclipse.ant.core</b> plug-in.
</p>

<p>The following code snippet shows an example of how to use the <a href="../reference/api/org/eclipse/ant/core/AntRunner.html"><b>AntRunner</b></a>:</p>

<pre><font color="#4444CC">import org.eclipse.ant.core.AntRunner;
import org.eclipse.core.runtime.IProgressMonitor;

public class Running {

public static void main(String[] args) throws Exception {
	IProgressMonitor monitor = ...
	AntRunner runner = new AntRunner();
	runner.setBuildFileLocation(&quot;c:/buildfiles/build.xml&quot;);
	runner.setArguments(&quot;-Dmessage=Building -verbose&quot;);
	runner.run(monitor);
}
}</font></pre>

<p>If a progress monitor is used, it is made available for the running tasks.
See <a href="./ant_contributing_task.htm#monitor">Progress Monitors</a> for more details.</p>

<h3>
Special care for native libraries</h3>
<P >
Every time an Ant script runs in Eclipse a new classloader is created. Since a library can only be
loaded by one classloader in Java, tasks making use of native libraries could run into problems during
multiple script runs. If the previous classloader has not been garbage collected at the time the new
classloader tries to load the native library, an exception is thrown indicating the problem and the
script execution fails. One way of avoiding this problem is having the library load be handled by
a class inside a plug-in library. The task can make use of that class for accessing native
methods. This way, the library is loaded by the plug-in classloader and it does not run into the
load library conflict.
</P>


<P >
&nbsp;</P>

<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corp. and others 2000,2002."width="250" height="12"></a></p>
</BODY></HTML>