<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
  <meta name="copyright"
 content="Copyright (c) Sonatype Inc and others 2010. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page.">
  <meta http-equiv="Content-Type"
 content="text/html; charset=ISO-8859-1">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <link REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
  <title>Overview of the p2 API</title>
</head>
<body>
API overview
<p>
The API for p2 can be generally split into three big categories. The UI API, the Operations API and the Core API. This section provides a description of each of these categories and introduces some of the key concepts.
</p>
<p>
The UI API. The UI API offers SWT-based UI elements such as wizard (<a href="org.eclipse.platform.doc.isv/reference/api/org/eclipse/equinox/p2/ui/ProvisioningUI.html">install, update, uninstall</a>), dialogs (to <a href="org.eclipse.platform.doc.isv/reference/api/org/eclipse/equinox/p2/ui/RepositoryManipulationPage.html">manipulate repositories</a> or see the <a href="org.eclipse.platform.doc.isv/reference/api/org/eclipse/equinox/p2/ui/InstalledSoftwarePage.html">content of an installation</a>) and the like that can be used for assembling a provisioning UI. 
Most of these elements can be customized by registering a new <a href="../reference/api/org/eclipse/equinox/p2/ui/Policy.html">Policy class</a>.
You can see examples of this in the <a href="org.eclipse.platform.doc.isv/guide/p2_ui.htm">customizing p2 UI section</a>. 
</p>
<p>
The Operation API. The operations API provides the easiest way to install, update and uninstall software in a headless way.  
For example the following code will cause the installation of the installable unit being passed in.
</p>
<code>
&nbsp;&nbsp;&nbsp;InstallOperation installOperation = new InstallOperation(session, toInstall);<br>
&nbsp;&nbsp;&nbsp;	if (installOperation.resolveModal(new NullProgressMonitor()).isOK())<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;installOperation.getProvisioningJob(new NullProgressMonitor()).schedule();<br>
</code>			
<p>
The Core API. The core API contains all the building block on which the Operation and UI APIs are being built.
</p>
<p>
Installable unit is the source of metadata and what is being passed to p2 to trigger an installation, removal, or update.
An installable unit is usually obtained either by querying a source of metadata (e.g. a repository) or created programmatically.

A typical source of metadata is a metadata repository.

Side note: It is to be noted that the serialized format of an IU is not specified. For any manipulation of installable unit, we highly recommend to use the Installable unit API.
</p>
<p>
Query/Queryable
Every source of metadata is usually queryable (see <a href="../reference/api/org/eclipse/equinox/p2/query/IQueryable.html">org.eclipse.equinox.p2.query.IQueryable</a>). 
To discover an IU, one usually executes a query (see <a href="../reference/api/org/eclipse/equinox/p2/query/IQuery.html">IQuery</a>) against a metadata source.
Queries can be created in multiple ways. <a href="../reference/api/org/eclipse/equinox/p2/query/QueryUtil.html">QueryUtil</a> is a good starting point as it contains some of the most common queries such as query for an IU with a given id, id and version, etc..
Because of the extensible nature of p2, additional queries that are OSGi specific can actually be found in the package <a href="../reference/api/org/eclipse/equinox/p2/touchpoint/eclipse/query/package-summary.html">org.eclipse.equinox.p2.eclipse.touchpoint</a>.
Finally should you need to write more complex queries, p2 comes with a query language called <a href="http://wiki.eclipse.org/Query_Language_for_p2">p2 QL</a>

</p>
<p>
Repository / Repository manager
In p2, a <a href="../reference/api/org/eclipse/equinox/p2/repository/IRepository.html">repository</a> is a container of installable units (also called <a href="../reference/api/org/eclipse/equinox/p2/repository/metadata/IMetadataRepository.htm">metadata repository</a>) or artifacts (also called <a href="../reference/api/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.htm">artifact repository</a>) that can be remote or local, and it can be edited and queried.
The repositories known from p2 are stored in a <a href="../reference/api/org/eclipse/equinox/p2/repository/IRepositoryManager.htm">repository manager</a>. The repository manager has the ability to create, add or remove and enable or disable repositories.
</p>
<p>
ProvisioningAgent
A <a href="../reference/api/org/eclipse/equinox/p2/core/IProvisioningAgent.htm">provisioning agent</a> represents an aggregation of all the p2 services working together. It is the starting point of everything. The simplest way to think about it is that it is an "executable" representation of what is the p2 area (e.g. the p2 folder at the root of an eclipse installation). The agent contains generic methods to obtain any of the p2 "services". For example the following code will get an instance of the repository manager:
</p>
<code>
&nbsp;&nbsp;&nbsp;ServiceReference sr = Activator.sContext.getServiceReference(IProvisioningAgentProvider.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgentProvider agentProvider = null;<br>
&nbsp;&nbsp;&nbsp;if (sr == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
&nbsp;&nbsp;&nbsp;agentProvider = (IProvisioningAgentProvider) Activator.sContext.getService(sr);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgent agent = agentProvider.createAgent(new URI("file:/Applications/eclipse36/p2"));<br>
</code>
<p>
The concept of agent allows for multiple instances of p2 to be running in isolation in the same VM.
Note that the client creating the agent is responsible for destroying it.
</p>
<p>
Profile / Profile Registry
The <a href="../reference/api/org/eclipse/equinox/p2/engine/IProfile.htm">profile</a> is the entity that describe in terms of installable units what a given installation is made of, as such it is queryable.
The <a href="../reference/api/org/eclipse/equinox/p2/engine/IProfileRegistry.htm">profile registry</a> knows about all the profiles from a given p2 area.
</p>

<p>
Putting it all together.
The following code is the complete code snippet to trigger the installation of an IU.
<code>
&nbsp;&nbsp;&nbsp;ProvisioningSession session = null;<br>
<br>
&nbsp;&nbsp;&nbsp;//get the agent<br>
&nbsp;&nbsp;&nbsp;ServiceReference sr = Activator.sContext.getServiceReference(IProvisioningAgentProvider.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgentProvider agentProvider = null;<br>
&nbsp;&nbsp;&nbsp;if (sr == null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>
&nbsp;&nbsp;&nbsp;agentProvider = (IProvisioningAgentProvider) Activator.sContext.getService(sr);<br>
&nbsp;&nbsp;&nbsp;IProvisioningAgent agent = agentProvider.createAgent(new URI("file:/Applications/eclipse63/p2"));<br>
<br>
&nbsp;&nbsp;&nbsp;//get the repository managers<br>
&nbsp;&nbsp;&nbsp;IMetadataRepositoryManager manager = (IMetadataRepositoryManager) agent.getService(IMetadataRepositoryManager.SERVICE_NAME);<br>
&nbsp;&nbsp;&nbsp;IArtifactRepositoryManager artifactManager = (IArtifactRepositoryManager) agent.getService(IArtifactRepositoryManager.SERVICE_NAME);<br>
<br>
&nbsp;&nbsp;&nbsp;//Loading repositories<br>
&nbsp;&nbsp;&nbsp;IMetadataRepository metadataRepo = manager.loadRepository(new URI("file:/Users/Pascal/tmp/demo/"), new NullProgressMonitor());<br>
&nbsp;&nbsp;&nbsp;IArtifactRepository artifactRepo = artifactManager.loadRepository(new URI("file:/Users/Pascal/tmp/demo/"), new NullProgressMonitor());<br>
<br>
&nbsp;&nbsp;&nbsp;//Querying<br>
&nbsp;&nbsp;&nbsp;Collection toInstall = metadataRepo.query(QueryUtil.createIUQuery("org.eclipse.equinox.p2.demo.feature.group"), new NullProgressMonitor()).toUnmodifiableSet();<br>
<br>
&nbsp;&nbsp;&nbsp;InstallOperation installOperation = new InstallOperation(session, toInstall);<br>
&nbsp;&nbsp;&nbsp;if (installOperation.resolveModal(new NullProgressMonitor()).isOK())<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;installOperation.getProvisioningJob(new NullProgressMonitor()).schedule();<br>
&nbsp;&nbsp;&nbsp;agent.close()<br>
<br>
</code>
</p>
</body>
</html>