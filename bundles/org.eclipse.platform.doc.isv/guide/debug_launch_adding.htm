<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Adding launchers to the platform</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<h3>Adding launchers to the platform</h3>
<p>Your plug-in can add launch configuration types to the platform using the <a href="../reference/extension-points/org_eclipse_debug_core_launch_configuration_types.html"><b>org.eclipse.debug.core.launchConfigurationTypes</b></a>
extension point.&nbsp; This extension point allows you to declare a
configuration type using a unique id.&nbsp; You must provide a corresponding
implementation of <a href="../reference/api/org/eclipse/debug/core/model/ILaunchConfigurationDelegate.html"><b>ILaunchConfigurationDelegate</b></a>
in your plug-in.&nbsp; You can also specify which modes (run, debug) are
supported by your launcher and a name that should be used when showing launchers
of this type to the user.</p>
<p>The following markup shows how the Java tools declare a Java launch
configuration for launching local Java programs:</p>
<pre><font color="#4444CC">&lt;extension point = &quot;org.eclipse.debug.core.launchConfigurationTypes&quot;&gt;
   &lt;launchConfigurationType
   	   id=&quot;org.eclipse.jdt.launching.localJavaApplication&quot;
	   name=&quot;%localJavaApplication&quot;
	   delegate=&quot;org.eclipse.jdt.internal.launching.JavaLocalApplicationLaunchConfigurationDelegate&quot;
	   modes= &quot;run, debug&quot;&gt;
   &lt;/launchConfigurationType&gt;
&lt;/extension&gt;</font></pre>
<h4>Defining source locators</h4>
<p>For each type of launch configuration that supports debug mode, it is
important to define a way to find the source code that corresponds with the
current execution point in the code.&nbsp; <a href="../reference/api/org/eclipse/debug/core/model/ISourceLocator.html"><b>ISourceLocator</b></a>
and <a href="../reference/api/org/eclipse/debug/core/model/IPersistableSourceLocator.html"><b>IPersistableSourceLocator</b></a>
define an interface for mapping from an executing program back to the source
code. </p>
<p>Source locators are typically implemented to work with a corresponding launch
configuration and launch configuration delegate.&nbsp; Since launch
configurations can be persisted, source locators may also be stored
with the launch configuration.&nbsp; This is accomplished by setting an
attribute of the launch configuration to an id of a source locator.&nbsp; When a
launch configuration is read from disk, the id of the source locator must be
mapped back to the implementation class.&nbsp; This is achieved using the <a href="../reference/extension-points/org_eclipse_debug_core_source_locators.html"><b>org.eclipse.debug.core.sourceLocators</b></a>
extension point.&nbsp;</p>
<p>The extension point allows you to register your class that implements <a href="../reference/api/org/eclipse/debug/core/model/IPersistableSourceLocator.html"><b>IPersistableSourceLocator</b></a>
and associate it with an id that will be stored with the launch
configuration.&nbsp; This allows the debug plug-in to look up source locator
classes by id when it's time to instantiate a launch configuration.</p>
<p>The following markup is from the Java tooling:</p>
<pre><font color="#4444CC">&lt;extension point = &quot;org.eclipse.debug.core.sourceLocators&quot;&gt;
	&lt;sourceLocator
		id = &quot;org.eclipse.jdt.debug.ui.javaSourceLocator&quot;
	   	class=&quot;org.eclipse.jdt.debug.ui.JavaUISourceLocator&quot;
	   	name=&quot;Prompting Java Source Locator&quot;/&gt;
&lt;/extension&gt;</font></pre>
<h4>Comparing launch configurations</h4>
<p>Plug-ins use named attributes and values to store important data with a
launch configuration.&nbsp; Since the interpretation of any attribute is not known by the platform, an extension point is provided
that allows you to supply a comparator for a specific attribute.&nbsp; This
comparator is used to determine whether attributes of the specified name are
equal.&nbsp; In many cases, the simple string compare provided by
java.lang.Object.equals(Object) is suitable for comparing attributes.&nbsp; This
method will
be used if no comparator has been provided.&nbsp; However, some attribute values
may require special handling, such as stripping white space values from text
before comparing for equality. </p>
<p>Comparators are contributed using the <a href="../reference/extension-points/org_eclipse_debug_core_launch_configuration_comparators.html"><b>org.eclipse.debug.core.launchConfigurationComparators</b></a>
extension point.&nbsp; </p>
<p>The Java tools supply launch configuration comparators for comparing program
source paths and class paths.</p>
<pre><font color="#4444CC">&lt;extension point = &quot;org.eclipse.debug.core.launchConfigurationComparators&quot;&gt;
	&lt;launchConfigurationComparator
		id = &quot;org.eclipse.jdt.launching.classpathComparator&quot;
		class = &quot;org.eclipse.jdt.internal.launching.RuntimeClasspathEntryListComparator&quot;
		attribute = &quot;org.eclipse.jdt.launching.CLASSPATH&quot;/&gt;
	&lt;launchConfigurationComparator
		id = &quot;org.eclipse.jdt.launching.sourcepathComparator&quot;
		class = &quot;org.eclipse.jdt.internal.launching.RuntimeClasspathEntryListComparator&quot;
		attribute = &quot;org.eclipse.jdt.launching.SOURCE_PATH&quot;/&gt;		
&lt;/extension&gt;</font></pre>
<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corp. and others 2000,2002."width="250" height="12"></a></p>
</BODY>
</HTML>
