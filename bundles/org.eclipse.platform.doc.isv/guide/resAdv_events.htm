<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Tracking resource changes
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
Tracking resource changes</H2>
<P >
The resources plug-in includes an event mechanism for notifying interested parties of changes to resources.  If you need to keep track of changes to the resource tree while your plug-in is running, you can register an
<b><a href="../reference/api/org/eclipse/core/resources/IResourceChangeListener.html"> IResourceChangeListener</a></b> with the workspace. Your listener will be notified
of the changes via an
<b><a href="../reference/api/org/eclipse/core/resources/IResourceChangeEvent.html"> IResourceChangeEvent</a></b> 
object, which describes the changes.</P>

<H3>
Resource change processing</H3>
<P >
To track changes to resources, you must register a resource change listener with the workspace.</P>
<font color='#4444CC'><pre>
   IResourceChangeListener listener = new MyResourceChangeReporter();
   ResourcesPlugin.getWorkspace().addResourceChangeListener(
      listener, IResourceChangeEvent.POST_CHANGE);
</pre></font>
<P >
Your listener will be notified after modifications to the workspace resources
have been made. Resource API methods that modify resources trigger these events as part of their documented behavior. The
method comment for a resource API method explicitly states whether or not it triggers a resource change event. For example, the following is included in the
<b> IFile.setContents()</b> comment:</P>
<font color='#4444CC'><pre>
   This method changes resources; these changes will be reported in a subsequent
   resource change event, including an indication that this file's content have
   been changed.
</pre></font>
<P >
Methods that create, delete, or change a resource typically trigger these events. Methods that read, but do not write, resources typically do not trigger these events.</P>


<H3>
Batch changes and resource deltas</H3>
<P >
If you need to modify a number of resources at once, you can batch your resource change API
calls so that only one resource change event will be sent for the entire set of changes.<b> IWorkspace.run(runnable, monitor)</b> is used to batch the operations. Resource change events are only sent to registered listeners when the specified
<b>runnable</b> is completed. Any additional (nested)
Runnables created in the runnable will be considered part of the parent batch
operation and the resource changes made in those runnables will appear in the
parent's resource change notification.</P>
<P >
You should batch your changes whenever possible to limit the overhead of
broadcasting many granular changes.&nbsp; Failure to use batching will likely flood the system
with resource change notifications and auto-builds.</P>
<P >
The resource change event describes the specifics of the change (or set of changes) that have occurred in the workspace. The event contains a
<b> resource delta</b> that describes the <i> net</i> effect of the changes. For example, if you add a resource and later delete it during one batch of changes, the resource will not appear in the delta.</P>
<P >
The resource delta is structured as a tree rooted at the workspace root. The resource delta tree describes these types of changes:</P>
<ul>
  <li>
Resources that have been created, deleted, or changed. If you have deleted (or added) a folder, the resource delta will include the folder and all files contained in the folder.</li>
  <li>
Resources that have been moved or renamed using the <b> IResource.move()</b> API.</li>
  <li>
Markers that have been added, removed, or changed. Marker modification is considered to be a workspace modification operation.</li>
  <li>
Files that have been modified. Changed files are identified in the resource delta, but you do not have access to the previous content of the file in the resource delta.</li>
</ul>
<P >
To traverse a resource delta tree, you may implement the <b><a href="../reference/api/org/eclipse/core/resources/IResourceDeltaVisitor.html"> IResourceDeltaVisitor</a></b> 
interface or traverse the tree explicitly using <b>IResource.getAffectedChildren</b>. Resource delta visitors implement a
<b> visit</b> method that is called by the resource delta as it enumerates each change in the tree.</P>
<i><blockquote>
Note:&nbsp; Changes made to resource session properties or resource persistent properties are not identified in the resource delta.</blockquote></i>


<H3>
Resource change events</H3>
<P >
Resource change events are sent whenever a change (or batched set of changes) is made to the workspace. In addition, resource change events are sent for
certain specific workspace operations. The table below summarizes the types of resource change events and when they are
reported.</P>
<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
Event type</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P CLASS="CellHeading">
Description</P>
</TH>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
PRE_CLOSE</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Notifies listeners that a project is about to be closed. This event can be used to extract and save necessary information from the in-memory representation
(e.g., session properties) of a project before it is closed. (When a project is closed, the in-memory representation is disposed). The workspace is locked (no resources can be updated) during this event.
The event contains the project that is being closed.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody">
<b>
PRE_DELETE</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Notifies listeners that a project is about to deleted. This event can be used to
perform clean-up operations, such as removing any saved state that is related to
the project from your plug-in's directory.&nbsp; The workspace is locked (no resources can be updated) during this event. The event contains the project that is being deleted.</P>
</TD>
</TR>
<TR>
<TD>
<P CLASS="CellBody"><b>PRE_AUTOBUILD</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Notifies listeners before any auto-building occurs.&nbsp; This event is
broadcast when the platform detects an auto-build needs to occur, regardless of
whether auto-building is actually enabled.&nbsp; The workspace is <b> not</b> locked during this event (resources can be updated). The event contains a resource delta describing the changes that have occurred since the last
<b>POST_CHANGE</b> event was reported.</P>
</TD>
</TR>
<tr>
<TD>
<P CLASS="CellBody">
<b>
POST_AUTOBUILD</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Notifies listeners after any auto-building has occurred. This event is broadcast
after the platform would have performed an auto-build, regardless of whether
auto-building is actually enabled.&nbsp; The workspace is <b> not</b> locked during this event (resources can be updated). The event contains a resource delta describing the changes that have occurred since the last
<b>POST_CHANGE</b> event was reported.</P>
</TD>
</tr>
<tr>
<TD>
<P CLASS="CellBody">
<b>
POST_CHANGE</b></P>
</TD>
<TD>
<P CLASS="CellBody">
Describes a set of changes that have occurred to the workspace since the last <b> POST_CHANGE</b> event was reported. Triggered after a resource change API is used individually or in a batched set of workspace changes. Also triggered after any
<b>PRE_AUTOBUILD</b> or <b>POST_AUTOBUILD</b>
notification is complete. The event contains a resource delta describing the net changes since the last
<b> POST_CHANGE</b> event.&nbsp; The workspace is
locked (no resources can be updated) during this event.</P>
</TD>
</tr>
</TABLE>


<H3>
<a name="resAdv_events_listener">
Implementing a resource change listener</a></H3>
<P >
The following example implements a console-based resource change listener. A resource change listener is registered for specific types of events and information about these events is printed to the console:</P>
<font color='#4444CC'><pre>
   IResourceChangeListener listener = new MyResourceChangeReporter();
   ResourcesPlugin.getWorkspace().addResourceChangeListener(listener,
      IResourceChangeEvent.PRE_CLOSE
      | IResourceChangeEvent.PRE_DELETE
      | IResourceChangeEvent.PRE_AUTO_BUILD
      | IResourceChangeEvent.POST_AUTO_BUILD
      | IResourceChangeEvent.POST_CHANGE);
</pre></font>
<P >
The listener checks for each event type and reports information about the resource that was changed and the kinds of changes that occurred.&nbsp;
Although this example is designed to show a general listener that handles all
the types of resource events, a typical listener would register for just one
type of event.</P>
<P >
The implementation for <b> POST_CHANGE </b> uses another class that can be used to visit the changes in the resource delta.</P>
<font color='#4444CC'><pre>
   import org.eclipse.resources.*;
   import org.eclipse.runtime.*;

   public class MyResourceChangeReporter implements IResourceChangeListener {
      public void resourceChanged(IResourceChangeEvent event) {
         IResource res = event.getResource();
         switch (event.getType()) {
            case IResourceChangeEvent.PRE_CLOSE:
               System.out.print(&quot;Project &quot;);
               System.out.print(res.getFullPath());
               System.out.println(&quot; is about to close.&quot;);
               break;
            case IResourceChangeEvent.PRE_DELETE:
               System.out.print(&quot;Project &quot;);
               System.out.print(res.getFullPath());
               System.out.println(&quot; is about to be deleted.&quot;);
               break;
            case IResourceChangeEvent.POST_CHANGE:
               System.out.println(&quot;Resources have changed.&quot;);
               event.getDelta().accept(new DeltaPrinter());
               break;
            case IResourceChangeEvent.PRE_AUTO_BUILD:
               System.out.println(&quot;Auto build about to run.&quot;);
               event.getDelta().accept(new DeltaPrinter());
               break;
            case IResourceChangeEvent.POST_AUTO_BUILD:
               System.out.println(&quot;Auto build complete.&quot;);
               event.getDelta().accept(new DeltaPrinter());
               break;
         }
      }
   }
</pre></font>
<P >
The <b> DeltaPrinter</b> class implements the <b><a href="../reference/api/org/eclipse/core/resources/IResourceDeltaVisitor.html">IResourceDeltaVisitor</a></b> interface to interrogate the resource delta. The
<b> visit()</b> method is called for each resource change in the resource delta. The visitor uses a return value to indicate whether
deltas for child resources should be visited. </P>
<font color='#4444CC'><pre>
   class DeltaPrinter implements IResourceDeltaVisitor {
      public boolean visit(IResourceDelta delta) {
         IResource res = delta.getResource();
         switch (delta.getKind()) {
            case IResourceDelta.ADDED:
               System.out.print(&quot;Resource &quot;);
               System.out.print(res.getFullPath());
               System.out.println(&quot; was added.&quot;);
               break;
            case IResourceDelta.REMOVED&quot;
               System.out.print(&quot;Resource &quot;);
               System.out.print(res.getFullPath());
               System.out.println(&quot; was removed.&quot;);
               break;
            case IResourceDelta.CHANGED:
               System.out.print(&quot;Resource &quot;);
               System.out.print(res.getFullPath());
               System.out.println(&quot; has changed.&quot;);
               break;
         }
         return true; // visit the children
      }
   }
</pre></font>
<P >
Further information can be obtained from the supplied resource delta. The following snippet shows how
the <b>IResourceDelta.CHANGED</b> case could be implemented to further describe the resource changes.</P>
<font color='#4444CC'><pre>
   ...
   case IResourceDelta.CHANGED:
      System.out.print(&quot;Resource &quot;);
      System.out.print(delta.getFullPath());
      System.out.println(&quot; has changed.&quot;);
      int flags = delta.getFlags();
      if ((flags &amp; IResourceDelta.CONTENT) != 0) {
            System.out.println(&quot;--&gt; Content Change&quot;);
      }
      if ((flags &amp; IResourceDelta.REPLACED) != 0) {
            System.out.println(&quot;--&gt; Content Replaced&quot;);
      }
      if ((flags &amp; IResourceDelta.MARKERS) != 0) {
            System.out.println(&quot;--&gt; Marker Change&quot;);
            IMarkerDelta[] markers = delta.getMarkerDeltas();
            // if interested in markers, check these deltas
      }
      break;
   ...
</pre></font>
<P >
For a complete description of resource deltas, visitors, and marker deltas, consult the
API specification for <b><a href="../reference/api/org/eclipse/core/resources/IResourceDelta.html">IResourceDelta</a></b>,
<b><a href="../reference/api/org/eclipse/core/resources/IResourceDeltaVisitor.html">IResourceDeltaVisitor</a></b>, and
<b><a href="../reference/api/org/eclipse/core/resources/IMarkerDelta.html">IMarkerDelta</a></b>.</P>
<i><blockquote>
Note:&nbsp; Resource change listeners are useful for tracking changes that occur to resources while your plug-in is activated. If your plug-in registers a resource change listener during its startup code, it's possible that many resource change events have been triggered before the activation of your plug-in. The resource delta contained in the first resource change event received by your plug-in will not contain all of the changes made since your plug-in was last activated. If you need to track changes made between activations of your plug-in, you should use the support provided for workspace saving. This is described in
<a HREF="resAdv_saving.htm" CLASS="XRef"> Workspace save participation</a>.</blockquote></i>

<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corporation and others 2000, 2003." border="0" width="324" height="14"></a></p>

</BODY>
</HTML>
