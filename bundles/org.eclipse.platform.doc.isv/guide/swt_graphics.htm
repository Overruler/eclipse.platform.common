<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
Graphics
</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
Graphics</H2>
<P >
SWT provides a robust graphics engine for drawing graphics and displaying images in widgets. You can get pretty far without ever programming to the graphics interface, since widgets handle the painting of icons, text, and other data for you. If your application displays custom graphics, or if you are implementing a custom drawn widget, you will need to understand some basic drawing objects in
SWT.</P>

<H3>
Graphics context</H3>
<P >
The graphics context, <b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a></b>, is the focal point for SWT graphics support. Its API describes all of the drawing capabilities in
SWT.</P>
<P >
A <b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a>
</b>can be used for drawing on a control (the most common case) or for drawing on an image,
display, or printer. When drawing on a control, you use the
<b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a>
</b>supplied to you in the control's paint event. When drawing on an image,
display, or printer, you must create a
<b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a>
</b>configured for it (and dispose of it when you are finished using it).</P>
<P >
Once you've got a <b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a></b>, you can set its attributes, such as color, line width, and font, which control the appearance of the graphics drawn in the
<b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a></b>.</P>
<P >
The API Reference for <b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a>
</b>describes the complete set of graphics functions. </P>


<H3>
Fonts</H3>
<P >
The <b><a href="../reference/api/org/eclipse/swt/graphics/Font.html"> Font</a></b> and
<b><a href="../reference/api/org/eclipse/swt/graphics/FontData.html"> FontData</a></b> classes are used when manipulating fonts in SWT.</P>
<P >
<b><a href="../reference/api/org/eclipse/swt/graphics/FontData.html"> FontData</a></b> describes the characteristics of a font. You can create a
<b><a href="../reference/api/org/eclipse/swt/graphics/FontData.html"> FontData</a></b> by specifying a font name, style, and size.
<b><a href="../reference/api/org/eclipse/swt/graphics/FontData.html"> FontData</a></b> includes API for querying these attributes. Since
<b><a href="../reference/api/org/eclipse/swt/graphics/FontData.html"> FontData</a></b> does not allocate any OS resources, you do not need to dispose of it.</P>
<P >
The <b><a href="../reference/api/org/eclipse/swt/graphics/Font.html"> Font</a>
</b>is the actual graphic object representing a font that is used in the drawing API. You create a
<b><a href="../reference/api/org/eclipse/swt/graphics/Font.html"> Font</a>
</b>for a <b><a href="../reference/api/org/eclipse/swt/widgets/Display.html"> Display</a></b> by specifying the
<b><a href="../reference/api/org/eclipse/swt/widgets/Display.html"> Display</a>
</b>and the <b><a href="../reference/api/org/eclipse/swt/graphics/FontData.html"> FontData</a></b> of the font that you want. You can also query a
<b><a href="../reference/api/org/eclipse/swt/graphics/Font.html"> Font</a>
</b>for its <b><a href="../reference/api/org/eclipse/swt/graphics/FontData.html"> FontData</a></b>.</P>
<P >
You must dispose of a
<b><a href="../reference/api/org/eclipse/swt/graphics/Font.html"> Font</a></b>
when you are finished using it.</P>


<H3>
Colors</H3>
<P >
Colors are similar to fonts. You create a <b><a href="../reference/api/org/eclipse/swt/graphics/Color.html"> Color</a></b> for a
<a href="../reference/api/org/eclipse/swt/widgets/Display.html"><b> Display</b></a> by specifying the RGB values for the desired color. You must dispose of a color when you are finished using it.</P>
<P >
The <b><a href="../reference/api/org/eclipse/swt/widgets/Display.html"> Display</a>
</b>method <b> getSystemColor</b> allows you to query the predefined system colors for the OS platform. You should not free colors obtained using this technique.</P>


<P >
The color model is discussed in detail in the article, <a href="http://www.eclipse.org/articles/SWT%20Color%20Model/swt-color-model.htm">SWT
Color Model</a>.</P>


<H3>
Images</H3>
<P >
The <b><a href="../reference/api/org/eclipse/swt/graphics/Image.html">Image</a></b>,
<b><a href="../reference/api/org/eclipse/swt/graphics/ImageData.html">ImageData</a></b>, and
<b><a href="../reference/api/org/eclipse/swt/graphics/ImageLoader.html"> ImageLoader</a></b> classes are used when manipulating Images in SWT.</P>
<P >
<b><a href="../reference/api/org/eclipse/swt/graphics/ImageData.html">ImageData</a></b>
describes the actual pixels in the image, using the <a href="../reference/api/org/eclipse/swt/graphics/PaletteData.html"><b> PaletteData</b></a> class to describe the color values used in the image.
<b><a href="../reference/api/org/eclipse/swt/graphics/ImageData.html">ImageData</a></b>
is a device and platform independent description for an image.</P>
<P >
<b><a href="../reference/api/org/eclipse/swt/graphics/ImageLoader.html"> ImageLoader</a></b>
loads and saves <b><a href="../reference/api/org/eclipse/swt/graphics/ImageData.html">ImageData</a></b>
in different file formats. SWT currently supports loading and saving of <b> BMP</b> (Windows Bitmap),
<b> ICO</b> (Windows Icon), <b>JPEG</b>,
<b>GIF</b>, and <b> PNG</b> image formats.</P>
<P >
The <b><a href="../reference/api/org/eclipse/swt/graphics/Image.html">Image</a></b>
is the actual graphic object representing the image that is used in the drawing API. You create an image for a particular
<a href="../reference/api/org/eclipse/swt/widgets/Display.html"><b> Display</b></a>. Images can be created
in several ways:</P>


<ul>
  <li>&nbsp;use an <b><a href="../reference/api/org/eclipse/swt/graphics/ImageData.html">ImageData</a></b>
    to initialize the image's contents</li>
  <li>copy an existing <b><a href="../reference/api/org/eclipse/swt/graphics/Image.html">Image</a></b>
  </li>
  <li>load an <b><a href="../reference/api/org/eclipse/swt/graphics/Image.html">Image</a></b>
    from a file.</li>
</ul>
<p> No matter how you create the <b><a href="../reference/api/org/eclipse/swt/graphics/Image.html">Image</a></b>, you are responsible for disposing it.</p>


<H3>
Graphics object lifecycle</H3>
<P >
Most of the graphics objects used for drawing in SWT allocate resources in the underlying OS and must be explicitly freed. The same rule of thumb discussed earlier applies here. If you create it using a constructor, you should free it. If you get access to it from somewhere else, do not free it.</P>

<H4>
Creation</H4>
<P >
Graphics objects such as graphics contexts, fonts, colors, and images are allocated in the OS as soon as the object is created. How you plan to use your graphics objects determines when you should create them.</P>
<P >
For graphics objects used heavily throughout the application, you can create them at the time that you create your widgets. This is commonly done for colors and fonts. In other cases, it is more appropriate to create your graphics objects on the fly. For example, you might create a graphics context in one of your widget event handlers to perform some calculations.</P>
<P >
If you are implementing a custom widget, you typically allocate graphics objects
in the constructor if you always use them. You might allocate them on the fly if you don't always use them or if they are dependent on the state of some attribute.</P>


<H4>
Painting</H4>
<P >
Once you've allocated your graphics objects, you are ready to paint. <b> Always do your painting inside a paint listener.</b> There are rare cases (particularly when implementing custom widgets) when you paint while responding to some other event. This is generally discouraged. If you think you need to paint while handling some other
event, you should first try using the <b> redraw</b> method, which will generate another paint
event in the OS. Drawing outside of the paint method defeats platform optimizations and can even cause bugs depending on the number of pending paints in the event queue.</P>
<P >
When you receive a paint event, you will be supplied with a <b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a>
</b>pre-configured for drawing in the widget. <b> Do not free this <b><a href="../reference/api/org/eclipse/swt/graphics/GC.html">GC</a></b>!</b> You did not create it. </P>
<P >
Any other graphics objects must be allocated while handling the event (or
beforehand). Below is a snippet based on the
<b> org.eclipse.swt.examples.HelloWorld5</b> sample. The color red was previously allocated when creating the widget, so it can be used here.</P>
<font color='#4444CC'><pre>
   shell.addPaintListener(new PaintListener () {
      public void paintControl(PaintEvent event){
         GC gc = event.gc;
         gc.setForeground(red);
         Rectangle rect = event.widget.getClientArea();
         gc.drawRectangle(rect.x + 10, rect.y + 10, rect.width - 20, rect.height - 20);
         gc.drawString(resHello.getString(&quot;Hello_world&quot;), rect.x + 20, rect.y + 20);
      }
   });
</pre></font>


<H4>
Disposal</H4>
<P >
Every graphics object that you allocate must be freed when you are finished using it. </P>
<P >
The timing of the disposal depends on when you created the object. If you create a graphics object while creating your widget, you should generally add a dispose listener onto the widget and dispose of the graphics when the widget is disposed. If you create an object on the fly while painting, you should dispose of it when finished painting.</P>
<P >
The next code snippet shows a slightly modified version of our paint listener. In this example, it allocates and frees the color red while painting.</P>
<font color='#4444CC'><pre>
   shell.addPaintListener(new PaintListener () {
      public void paintControl(PaintEvent event){
         GC gc = event.gc;
         Color red = new Color(event.widget.getDisplay(), 0xFF, 0, 0);
         gc.setForeground(red);
         Rectangle rect = event.widget.getClientArea();
         gc.drawRectangle(rect.x + 10, rect.y + 10, rect.width - 20, rect.height - 20);
         gc.drawString(resHello.getString(&quot;Hello_world&quot;), rect.x + 20, rect.y + 20);
         red.dispose();
      }
   });
</pre></font>


<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corp. and others 2000,2002."width="250" height="12"></a></p>


</BODY>
</HTML>
