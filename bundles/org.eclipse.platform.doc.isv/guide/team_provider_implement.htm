<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Implementing a provider</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">

<H3>
Implementing a provider</H3>
<P >
The class identified in the extension must be a subclass of <b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">RepositoryProvider</a></b>.
Its primary responsibilities are to configure and deconfigure a project for
repository support, and supply any necessary resource modification hooks.&nbsp;
The CVS client serves as a good example.&nbsp; Its repository provider is <b>CVSTeamProvider</b>.</P>
<font color='#4444CC'><pre>
   public class CVSTeamProvider extends RepositoryProvider {

	...</pre><p> <b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">RepositoryProvider</a> </b>defines two abstract methods, <b>configureProject</b> and <b>deconfigure</b>.&nbsp;
All providers must implement these methods.&nbsp; </p><p>A project is configured
when it is first associated with a particular repository provider.&nbsp; This
typically happens when the user selects a project and uses the team wizards to
associate a project with your repository.&nbsp; Regardless of how the operation
is triggered, this is
the appropriate time to compute or cache any data about the project that you'll
need to provide your repository function.&nbsp; (Assume that mapping the project
to your provider has already happened.&nbsp; You'll be taking care of this in
your configuration wizard.)</p><p>The
CVS provider simply broadcasts the fact that a project has been configured:</p><pre>public void configureProject() throws CoreException {
	CVSProviderPlugin.broadcastProjectConfigured(getProject());
}</pre><p>We won't follow the implementation of the plug-in broadcast
mechanism.&nbsp; Suffice to say that any parties that need to compute or
initialize project specific data can do so at this time.</p><p>A project is
deconfigured when the user no longer wants to associate a team provider with a
project.&nbsp;&nbsp; It is up to your plug-in to implement the user action that
causes this to happen (and unmapping the project from your team provider will
happen there).&nbsp; The <b>deconfigure</b> method&nbsp; is the
appropriate time to delete any project related caches or remove any references
to the project in the UI.&nbsp; The CVS provider flushes project related caches
kept in its views and broadcasts the fact that the project is deconfigured.</p><pre>public void deconfigure() throws CoreException {
	...
	try {
		EclipseSynchronizer.getInstance().flush(getProject(), true, true /*flush deep*/, null);
	} catch(CVSException e) {
		throw new CoreException(e.getStatus());
	} finally {
		CVSProviderPlugin.broadcastProjectDeconfigured(getProject());
	}
}</pre><h4>&nbsp;</h4>
</font>




<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corp. and others 2000,2002."width="250" height="12"></a></p>
</BODY>
</HTML>
