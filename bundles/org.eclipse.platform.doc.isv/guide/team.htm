<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Team and repository API</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H1>
Team and repository API</H1>
<p>
<b>Note:</b> <i>This chapter is under development.&nbsp; The following is an
outline for the full content.</i>
</p>
<p>
Philosophy of the team API:
</p>
<ul>
  <li>passive API - assumes no particular user workflow</li>
  <li>core API&nbsp;for team providers
    <ul>
      <li>hooks where you can intervene in file open/save, move/rename/delete</li>
      <li>file type info to use for ignoring certain files, handling merging,
        etc.</li>
    </ul>
  </li>
  <li>UI
    <ul>
      <li>generic wizard for configuring a project for team - providers add
    specific pages</li>
      <li>&quot;placeholders&quot; where you can hang your desired actions, prefs, props,
    etc.</li>
    </ul>
  </li>
</ul>
  <H2>
Repository providers</H2>
<P >
Providers are registered as a project nature.</P>
<P >Only one team nature per project.</P>
<P >This is where you can register all of your other core hooks for manipulating
resources (open/save, move/delete)</P>
<P >
To implement your own provider, you need to define an extension for the project
natures extension point and supply a class derived from <b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">Repository
Provider</a></b>.</P>

<H3>
Defining a provider</H3>
<P >
The <a href="../reference/extension-points/org_eclipse_core_resources_natures.html"> <b> org.eclipse.core.resources.natures</b></a> extension point is used to add a project nature definition.&nbsp;</P>
<P >(This will use an example rather than CVS...)</P>
<font color='#4444CC'><pre>&lt;extension 
	point=&quot;org.eclipse.core.resources.natures&quot; 
	id=&quot;cvsnature&quot; 
	name=&quot;%cvsNature&quot;&gt;
	&lt;runtime&gt;
		&lt;run class=&quot;org.eclipse.team.internal.ccvs.core.CVSTeamProvider&quot;/&gt;
	&lt;/runtime&gt;
	&lt;one-of-nature id=&quot;org.eclipse.team.repository-provider&quot;/&gt;
&lt;/extension&gt;</pre>
<p>Explain above...
</p>
</font>

<H3>
Implementing a provider</H3>
<P >
The class identified in the extension must be a subclass of <b><a href="../reference/api/org/eclipse/team/core/RepositoryProvider.html">Repository
Provider</a></b>. This class ....</P>
<font color='#4444CC'><pre>
   public class MyRepositoryProvider extends RepositoryProvider {

	blah blah blah
   }
</font>&nbsp;</pre><p>
   Discuss configuring the nature, providing a unique id
</p><h4>
   Resource modification hooks
</h4><p>
   Discuss FileModificationValidator and MoveDeleteHook
</p><h3>
   Finding a provider
</h3><p>
   Discuss the static methods in RepositoryProvider
</p>
  <H2>
Repository resource management</H2>
<p>In the context of a repository, there are additional issues associated with
resource management.</p>
<h3>File types</h3>
<p>Ignore sets, text vs. binary</p>
<h3>Project sets</h3>
<p>The need to pass projects around, specialized export that allows one to
reconstruct a project from a repository.&nbsp; (Is this right?)</p>
<h3>Project metadata</h3>
<p>Mention that it's up to the plug-in to define file structure/naming for any
metadata that it needs to keep about its projects.</p>
<h2>
   Building a team UI
</h2><p>
   Philosophy:&nbsp; You define the UI and workflow.&nbsp; We provide standard
   hooks/slots.
</p><h3>
   Configuring a project for a provider
</h3><p>
   Give an example of the configurationWizards extension and show screen snaps
</p><h3>
   Adding actions to standard views
</h3>
<p>Show object contributions to the team menu, discuss the slot and groups that
are predefined</p>
<h3>Using the workbench decorator mechanism </h3>
<p>Often we use decorators in the same views where we added actions.&nbsp; Show
an example.</p>
<h3>Adding preferences and properties</h3>
<p>Discuss the team slot for these things and show an example</p>
<p>
   &nbsp;
</p>




<p><a href="../hglegal.htm"><img border="0" src="../ngibmcpy.gif" width="250" height="12"></a></p>
</BODY>
</HTML>
