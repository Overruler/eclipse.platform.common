<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>Defining an extension point</TITLE>

<link rel="stylesheet" type="text/css" HREF="../book.css">
</HEAD>
<BODY BGCOLOR="#ffffff">
<H2>
Defining an extension point</H2>

<P >
When you want to allow other plug-ins to extend or customize the functionality of
your plug-in, you should define an <b>extension point</b>.  As with extensions,
the first step in defining an extension point is to add some markup to the <b>plugin.xml</b>
file of your plug-in.  Here is an example:</P>
<font color='#4444CC'><pre>
   &lt;?xml version=&quot;1.0&quot; ?&gt;
   &lt;plugin
      name=&quot;Simple Extension Point Plugin&quot; 
      id=&quot;org.eclipse.sample&quot;
      version=&quot;1.0&quot;&gt;
      &lt;runtime&gt;
         &lt;library name=&quot;extpt.jar&quot; /&gt;
      &lt;/runtime&gt;
      &lt;extension-point
         name=&quot;Sample Extension Point&quot;
         id=&quot;sampleExtensionPoint&quot;/&gt;
   &lt;/plugin&gt;
</pre></font>
<P>
That's all you have to do to define your own extension point.  The structure of the
extensions that connect to this extension point is not interpreted by the platform,
but instead should follow a schema defined by the extension point provider.
The only restriction is that the extension markup must be valid XML.  Once you
have defined your extension point, you can query the platform's <b>plug-in registry</b>
at runtime to query and process any extensions that may exist.  At runtime, the
extensions are manifested as <b><a href="../reference/api/org/eclipse/core/runtime/IExtension.html">IExtension</a></b> objects.
Extensions in turn are made up of a tree of <b><a href="../reference/api/org/eclipse/core/runtime/IConfigurationElement.html">IConfigurationElement</a></b> objects,
one for each element in the extension markup.  The following code snippet queries the plug-in
registry for any extensions that are associated with the extension point we defined above.</P>
<font color='#4444CC'><pre>
   IPluginRegistry registry = Platform.getPluginRegistry();
   IExtensionPoint point = registry.getExtensionPoint(&quot;org.eclipse.sample.sampleExtensionPoint&quot;);
   if (point != null) {
      IExtension[] extensions = point.getExtensions();
      System.out.println("Found " + extensions.length + " extensions");
   }
</pre></font>
<P>
In simple cases, the only interaction between an extension point and its extensions
is contained in the extension markup.  The extension may provide some data or preference
setting directly within the XML of the extension markup, and the extension point plug-in
then reads and processes that information to provide some customized behavior.
</P>
<H3>Interacting with code in an extension</H3>
<P>
With more advanced extension points, you may want to interact at runtime
with objects defined by the extension.  The trick here is that the plug-in that 
defines the extension point will typically know nothing about the names of classes
and packages in the extension, so it must define an <b>interface</b> to describe the
class structure it expects.  Then, it can instantiate classes in the extension's plugin
using an 
<b><a href="../reference/api/org/eclipse/core/runtime/IExecutableExtension.html">IExecutableExtension</a></b>, 
and use the interface to interact with the object at runtime.
</P>
<P>
To illustrate with an example, the following snippet from a plugin.xml file defines an
extension that hooks into our sample extension point which was defined earlier:
</P>
<font color='#4444CC'><pre>
   &lt;extension
      name=&quot;Sample Extension&quot;
      id=&quot;myExtension&quot;
      point=&quot;org.eclipse.sample.sampleExtensionPoint&quot;&gt;
         &lt;someObject&gt;
            &lt;run class=&quot;org.eclipse.examples.SomeClass&quot;/&gt;
         &lt;/someObject&gt;
   &lt;/extension&gt;
</pre></font>
<P>
This extension includes markup for an executable extension, which includes the name of the class
to be instantiated.  This class should conform to an interface defined by the plug-in
that defined the extension point.  As described earlier, the names of the tags in this example 
(&quot;someObject&quot; and &quot;run&quot;) are arbitrary.  These tags will be defined by the
extension point schema.
</P>
<P>
For this example, say the interface for the executable extension is called ISomeInterface.
The following code snippet in the extension point's plugin will query the plugin registry,
and instantiate all executable extensions for the extension point &quot;sampleExtensionPoint&quot;:
</P>
<font color='#4444CC'><pre>
   IPluginRegistry registry = Platform.getPluginRegistry();
   IExtensionPoint point = registry.getExtensionPoint(&quot;org.eclipse.sample.sampleExtensionPoint&quot;);
   IExtension[] extensions = point.getExtensions();
   for (int i = 0; i &lt; extensions.length; i++) {
      IConfigurationElement[] elements = extensions[i].getConfigurationElements();
      for (int j = 0; j &lt; elements.length; j++) {
         if (&quot;someObject&quot;.equals(elements[j].getName())) {
            ISomeInterface object = (ISomeInterface)elements[j].createExecutableExtension(&quot;run&quot;);
            System.out.println(&quot;Found an executable extension: &quot; + object);
         }
      }
   }
</pre></font>
<P>
That's all there is to it!  For more information, browse the javadoc for the 
<b><a href="../reference/api/org/eclipse/core/runtime/package-summary.html"> org.eclipse.core.runtime</a></b>
package, or look at the extension point defined in the 
<a href="../samples/org.eclipse.ui.examples.readmetool/doc-html/ui_readmetool_ex.html">readme
tool</a> (See the <a href="../samples/samples.html">Examples Guide </a> 
for install instructions).  The best example to look at is the extension points defined
by the Eclipse platform itself.
</P>

<p><img border="0" src="../ngibmcpy.gif" alt="Copyright IBM Corporation and others 2000, 2003." border="0" width="324" height="14"></p>

</BODY>
</HTML>