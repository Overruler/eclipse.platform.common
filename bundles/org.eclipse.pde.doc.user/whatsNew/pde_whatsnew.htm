<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<link rel="stylesheet" href="styles/default_style.css">
<link rel="STYLESHEET" href="../book.css" charset="ISO-8859-1" type="text/css">
<title>PDE What's New for 3.0</title>
</head>

<body>

<h2>What's New in 3.0</h2>
<p>Here are some of the more interesting or significant changes made to PDE 
for the 3.0 release of Eclipse since 2.1:</p>

<table border="1" cellpadding="10" cellspacing="0" width="600">
  <tbody>
 

  <tr>
    <td width="20%" valign="top" align="left">
      <p><b>One Plug-in, One Editor</b></p></td>
    <td width="80%" valign="top">The new plug-in manifest editor is a single
      multi-page editor that can be used to manage your plug-in and edit all its
      files (plugin.xml, build.properties, and manifest.mf).&nbsp; PDE
      transparently handles the task of writing the changes to the right files.
      <p><img border="1" src="images/one-editor.gif" width="466" height="499"></p></td>
  </tr>
  
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b><font size="2">New PDE build
      configuration editor</font></b></p></td>
    <td width="80%" valign="top"><font size="2">There's no longer
      any reason to dread editing your plug-in's cryptic build.properties file.
      PDE now provides a specialized build configuration editor that makes this
      task easy and intuitive.</font>
      <p><font size="2">
      <img border="0" src="images/build-editor.gif" alt="PDE build configuration dialog" width="457" height="540"></font></p></td>
  </tr>
    
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b><font size="2">Unit testing for
      plug-ins</font></b></p></td>
    <td width="80%" valign="top"><font size="2">PDE provides a
      new launcher for JUnit-based unit test suites for plug-ins. The launcher
      gives you fine-grained control over the set of plug-ins to run in a test,
      lets you debug with tracing, and can handle GUI as well as non-GUI
      plug-ins.</font>
      <p><font size="2">
      <img border="0" src="images/junit-launcher.gif" alt="PDE JUnit launcher configuration dialog" width="466" height="486"></font></p></td>
  </tr>
 
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b>PDE support for advanced runtime options</b></p></td>
    <td width="80%" valign="top">Plug-in developers wishing to exploit the
      capabilities of the new OSGi-based platform runtime can now self-host with
      plug-ins that use explicit OSGi bundle manifests (manifest.mf file). They
      will be able to import, develop, and test their plug-ins using PDE.
      <p>
      To take advantage of the new OSGi-based
      platform runtime on plug-in creation, PDE's plug-in project creation wizard
      now has an option for creating plug-ins with explicit OSGi bundle
      manifests.
      <p>
      <img src="images/alternate-format.gif" alt="Alternate plug-in format" border="0" width="438" height="512"></p>
      <p>  
     The Runtime page of the PDE manifest editor exposes one of several OSGi-based
     runtime features (control of plug-in activation) and will even create a
      manifest.mf file for your plug-in on demand.
      <p><img border="1" src="images/activation.gif" width="432" height="231"></p>
  </td>
  </tr>
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b>PDE computes plug-in build class paths dynamically</b>
      </p></td>
    <td width="80%" valign="top">You never need to update the Java build path of
      your plug-in ever again. PDE uses the JDT classpath container mechanism to
      dynamically compute the Java build path of a plug-in project. Because
      classpath containers are resolved on the fly, they are always accurate
      regardless of which plug-ins you are building against and whether they are
      loaded in workspace.
      <p>Refer to the <a href="../guide/dynamic-classpaths.htm">Dynamic
      Classpaths FAQ</a>  for more details.</p>
    </td>
  </tr>
 
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b>Improved error log view</b></p>
    </td>
    <td width="80%" valign="top">
          Additional features in the tool bar of the Error Log view make it effortless to export, open, or delete the current log.  You can also import external logs
      and reload your workspace log into the view.  Events can be organized via filtering and sorting by message, plug-in name, or date.
      <p>
      <img border="0" src="images/error-log-info.gif" alt="New error log view toolbar features" width="465" height="202"></p>
      <p><br>
    The error log view now lets you inspect the
      full details of an event, and easily navigate from one event to the next.
      <p>
      <img src="images/event-dialog.gif" alt="Detail dialog for error log view" width="464" height="529"></p>
      

      </td>
  </tr>
 
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b>Additional exporting functionality</b></p></td>
     <td width="80%" valign="top"> The PDE Export
      Deployable Plug-ins wizard now allows the plug-ins to be exported as a
      directory structure, and provides direct access to the preference page
      with the compiler settings that will be used.  

<p>
      Also, the plug-in export operations can now be saved as Ant build scripts 
      so that the same operation can be run later via the Ant runner without 
      having to go through the export wizard.<p>
     <img src="images/export.gif" width="435" height="618"></p></td>
  </tr>
   
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b>Expanding the Java search scope and source lookup</b></p></td>
    <td width="80%" valign="top">The "Add to Java Search"
      functionality was introduced in 2.1 to expand the scope of the Java search
      beyond workspace projects to include JARs from external plug-ins that
      constitute your target platform.
      <p>Select plug-ins and invoke <b>Add to Java Search</b> via the context 
      menu of the Plug-ins view.</p>
    <p>PDE now manages 
      and updates references to JARs automatically as you upgrade from build to
      build, and makes these JARs visible to the debugger. Taking advantage of
      this functionality will ensure that the debugger will automatically locate
      the relevant source code (if available). </p>
      <p>
      <img border="0" src="images/java-search.gif" alt="Add to Java Search" width="244" height="283"></p></td>
  </tr>
 
  
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b>New feature patch wizard</b></p></td>
    <td width="80%" valign="top">Available under <b>New &gt; Project...&gt;
      Plug-in Development &gt; Feature Patch</b>, there is now a wizard to help
      you create a patch for a feature. You can then publish the patch on an
      Update site so that customers of your feature can easily download and
      install it via the Update Manager.
      <p>
      <img border="1" src="images/feature-patch.gif" alt="New feature patch wizard" width="305" height="130"></p></td>
  </tr>
 
  <tr>
    <td width="20%" valign="top" align="left">
      <p><b>New PDE extension point</b></p></td>
    <td width="80%" valign="top">The new <i>org.eclipse.pde.ui.newExtension</i>
      extension point allows a tool to register custom extension editing
      wizards. These wizards allows developers contributing to extension points
      to work at a higher level; the wizards handle the conversion into XML
      elements.</td>
  </tr>
 
</tbody></table>

<p>
   <a href="../notices.html"><img src="../cpy.gif" border="0" alt="Legal notices" width="324" height="14"></a>
</p>

</body>

</html>