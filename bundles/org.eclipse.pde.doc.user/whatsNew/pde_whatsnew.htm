<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="STYLESHEET" href="../book.css" charset="ISO-8859-1" type="text/css">
<title>PDE What's New for 3.1</title>
</head>

<body>

<h2>What's New in 3.1</h2>
<p>This document contains descriptions of some of the more interesting or
significant changes made to PDE for the 3.1 release of
Eclipse since 3.0.</p>

<!-- *************************************************** -->
<h2><a name="PDE">PDE</a></h2>
<table cellpadding="10" cellspacing="0" width="600">
  <colgroup>
    <col width="20%" valign="top" align="right">
    <col width="80%" valign="top" align="left">
  </colgroup>
  <tbody>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Plug-in working set</b></td>

    <td width="70%" valign="top">If you find yourself working with the same
      subset of plug-ins over and over, you can now define a plug-in working
      set. Shortcuts to the working sets are available on the <b>Plug-in
      Development &gt; Target Platform</b> preference page and the <b>Eclipse
      Application </b>launch configurations.
      <p><img src="images/working-set.gif" width="356" height="261"></p>
      <p>&nbsp;</td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Validate plug-in set prior to launch</b></td>
    <td width="70%" valign="top">Prior to launching your Eclipse application,
      you can now validate the selected subset of plug-ins to find lurking
      launch startup problems such as unsatisfied plug-in dependencies, missing
      applications, etc.
      <p><img src="images/plugin-validation.gif" width="449" height="363"></td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>PDE supports JAR'd plug-in format</b></td>
    <td width="70%" valign="top">The Eclipse runtime supports a new plug-in
      format that houses all of the plug-in's files - code, resources, plug-in
      manifest - in a single JAR file, rather than in a directory. PDE now
      recognizes this format and lets you develop your plug-in against a target
      platform containing such plug-ins.
      <p><img src="images/jar-plug-in.gif" width="446"></td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Test with your custom configuration file</b></td>
    <td width="70%" valign="top">You can now use PDE to launch your Eclipse
      application at development time with the same custom configuration file (config.ini)
      you eventually plan to deploy with your application.
      <p><img src="images/configuration.gif" width="458" height="292"></p>
      <p>&nbsp;</td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Improved plug-in manifest checking</b></td>
    <td width="70%" valign="top">When a plug-in has a manifest.mf file, the
      plugin.xml file should contain only extension and extension point
      information. PDE now issues warnings when the plugin.xml file contains
      elements and attributes that are being ignored.
      <p><img src="images/warnings.gif" width="465" height="386"></td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Sharing plug-in manifest compiler settings</b></td>
    <td width="70%" valign="top">You can now set the PDE plug-in manifest
      compiler settings on a per-project basis and share these settings among
      team members.
      <p><img src="images/project-settings.gif"></td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Improved plug-in dependencies view</b></td>
    <td width="70%" valign="top">The PDE Plug-in Dependencies view now shows
      both tabular and tree visualizations of dependencies, as well as caller/callee
      relationships and cyclic dependencies. This view can be opened from the
      context menu of plug-in project via <b>PDE Tools &gt; Open Dependencies</b>.
      <p><img border="0" src="images/plugins.gif" width="440" height="377"></td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>No need to -clean</b></td>

    <td width="70%" valign="top">When self-hosting with PDE, you no longer need
      to launch a runtime Eclipse application with the <code>-clean</code>
      program argument. Leaving this argument off significantly improves startup
      time.</td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>New extension point schema attributes</b></td>
    <td width="70%" valign="top">Attributes and elements defined in your
      extension point schemas can now be marked as translatable. In the future,
      PDE will use this new property when externalizing strings in plug-in
      manifest files. Also, obsolete attributes and elements can be marked as
      deprecated, in the same spirit as @deprecated tag for obsolete Java APIs.</td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Improved manifest validation</b></td>
    <td width="70%" valign="top">PDE now flags more types of errors in various
      plug-in, feature, and update site manifest files, including strings that
      should be externalized, and usage of deprecated attributes and elements.
      <p><img border="0" src="images/compilers.gif" width="345" height="338"></td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Consolidated target platform</b></td>
    <td width="70%" valign="top">PDE's notion of target platform has been
      consolidated, and now includes both the target environment and target JRE.
      You can now edit all these settings on the <b>Plug-in Development &gt;
      Target Platform</b> preference page:
      <p><img border="0" src="images/target.gif" width="445" height="364"></td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Build an Eclipse product with a single click</b></td>
    <td width="70%" valign="top">You can now create and manage an Eclipse
      product in a *.product file, which can be created via <b>File &gt; New
      &gt; Other...&gt; Product Configuration</b>.
      <p>The product configuration editor manages all aspects of a product from
      basic definition to branding. You can create plug-in-based and
      feature-based products. The overview page provides hot links to test and
      export the product.</p>
      <p><img border="0" src="images/product-editor.png" width="458" height="408"></td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>New feature and update site manifest editors</b></td>
    <td width="70%" valign="top">The PDE feature and update site manifest
      editors have been redesigned to provide a simpler and better
      workflow.&nbsp; Improvements include the ability to build and package
      features without having to import them into your workspace.</td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Manifest editor supports more OSGi bundle manifest
      headers</b></td>
    <td width="70%" valign="top">The PDE plug-in editor now exposes many
      interesting features of the runtime that are available only if your
      plug-in has a manifest.mf file. The Runtime page of the editor, for
      example, is the place where you can control access to your plug-in's code
      on a fine-grained level.
      <p><img border="0" src="images/runtime.png" width="466" height="180"></td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Manifest.mf validation</b></td>
    <td width="70%" valign="top">PDE now flags syntactic and semantic errors in
      the plug-in's manifest.mf file.
      <p><img border="0" src="images/validation.png" width="440" height="246"></p>
    </td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Create a plug-in from existing JAR</b></td>
    <td width="70%" valign="top">PDE now provides a wizard that creates a
      plug-in from existing JAR archives. This wizard is ideal if you would like
      to package third-party non-Eclipse JARs as an Eclipse plug-in.
      <p>The wizard can be invoked via <b>File &gt; New &gt; Project &gt;
      Plug-in from existing JAR archives.</b></p>
      <p><img border="0" src="images/bundlizer.png" width="290" height="327"></td>
  </tr>

  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Eclipse Product Export wizard</b></td>
    <td width="70%" valign="top">In addition to a zip format, you can now export
      your Eclipse product as a directory structure. The new Eclipse Product
      Export wizard is invoked via <b>File &gt; Export &gt; Eclipse Product </b>or
      from the <b>Overview</b> page of the Product Configuration editor.
      <p><img border="0" src="images/export.png" width="461" height="379"></p>
    </td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Signed JARs</b></td>
    <td width="70%" valign="top">The feature and export plug-in wizards now
      provide you with the option to digitally sign your plug-in and feature
      archives for added security.
      <p><img border="0" src="images/signed.png" width="460" height="210"></td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Bundle manifests for plug-in</b></td>
    <td width="70%" valign="top">In Eclipse 3.1, it is strongly recommended that 
      plug-ins contain an OSGi bundle manifest.mf. In addition to faster startup 
      and classloading, this format will allow you to take advantage of many of 
      the new runtime capabilities such as fine control over what packages you 
      want to expose to clients. 
      <p>The option to create a manifest.mf in the New Plug-in Project creation 
        wizard is now on by default.</p>
    <p><img border="0" src="images/pluginwizard.png" width="353" height="389"></p>
    <p>You can create a bundle manifest.mf for an existing plug-in on the 
    Overview page of the plug-in manifest editor.</p>
    <p><img border="0" src="images/overview.png" width="322" height="217"></p>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>PDE enforces code accessibility</b></td>
    <td width="70%" valign="top">The plug-in's manifest.mf file allows you to 
      control on a per-package basis the visibility of your plug-in's code to 
      downstream plug-ins. 
      <p>PDE manages each plug-in's Java classpath and checks these visibility 
        rules at compile time. This means no one will never be caught by surprise 
        by classloading errors at runtime, and will always be aware when they 
        are referencing internal (discouraged) types.</p>
      <p><img border="0" src="images/restricted.png" width="466" height="115"></p></td>
  </tr>
  
  <tr><td colspan="2"><hr></td></tr>
  <tr>
    <td width="30%" valign="top" align="left">
      <p align="right"><b>Cross-platform product export</b></td>
    <td width="70%" valign="top">If you have the RCP delta pack installed, you 
      can now build and export your product for multiple platforms at the same 
      time via the Eclipse Product export wizard (<b>File &gt; Export &gt; Eclipse 
      Product</b>). 
      <p>
    <img border="0" src="images/cross.png" width="421" height="379"></p>
  </tr>
  
  <tr><td colspan="2"><hr></td> </tr>

<!-- ****************** END OF N&N TABLE ****************** -->
  </tbody>
</table>
<p>
   <a href="../notices.html"><img src="../cpy.png" border="0" alt="Legal notices" ></a>
</p>
</body>

</html>
