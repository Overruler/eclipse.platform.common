<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<meta name="copyright" content="Copyright (c) Eclipse contributors and others 2009. This page is made available under license. For full details see the LEGAL in the documentation book that contains this page." >
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>PDE - What's New in 3.5</title>
<link rel="stylesheet" href="../book.css" type="text/css">
<style type="text/css">
td {border-top: solid thin black;}
img[alt] {background-color:#ffdddd;}
tr {vertical-align: top;}
</style>
</head>
<body>
<h2>What's New in 3.5 (PDE) </h2>
<p>Here are descriptions of some of the more interesting or significant changes made to the Plug-in Development Environment (PDE) for the 3.5 release of Eclipse, grouped into:</p>
<ul>
  <li><a href="#ViewsAndEditors">Views and Editors</a></li>
  <li><a href="#Export">Export</a></li>
  <li><a href="#APITooling">API Tooling</a> </li>
  <li><a href="#Build">Build</a></li>
  <li><a href="#TargetPlatform">Target Platform </a></li>
</ul>
<!-- ****************** START OF N&N TABLE ****************** -->
<table cellpadding="10" cellspacing="0" width="600">
  <tr>
    <td colspan="2"><h2><a name="ViewsAndEditors">Views and Editors </a></h2></td>
  </tr>
  <tr id="pde-ds">
    <td align="left" valign="top"><b>Declarative services editor</b></td>
    <td valign="top">PDE has added declarative services tooling to help author service component definitions.
      <p><img src="images/pde-ds.png" alt="Declarative Services Editor"></p></td>
  </tr>
  <tr id="pde.ds">
    <td valign="top" align="left"><b>DS Tooling enhancements</b></td>
    <td valign="top"><p>The OSGi Declarative Services (DS) tooling has been
      enhanced to support the latest version of the DS specification. Specifically, a new <b>modified</b> attribute has been added to the component element.
      </p>
        <p>A new template based on a simple dictionary service has been added to 
          showcase Declarative Services tooling. </p>
      <p><img src="images/dstemplate.png" alt="DS Template"></p></td>
  </tr>
  <tr id="pde-logview">
    <td align="left" valign="top"><b>Jump to Console from stack trace</b></td>
    <td valign="top">The error log view has been enhanced to allow posting stack trace dumps to the <b>Console</b> view from log messages.
      <p><img src="images/pde-jumpconsole.png" alt="Jump to Console"></p></td>
  </tr>
  <tr id="pde-versioning">
    <td align="left" valign="top"><b>Versioning options</b></td>
    <td valign="top">To help developers follow versioning best practices, PDE has expanded its compiler options
      to include version constraint checks on imported packages, exported packages and required bundle statements.
      <p><img src="images/pde-versioning.png" alt="Preferences &gt; Plug-in Development &gt; Compilers"></p></td>
  </tr>
  <tr id="pde.options.editor">
    <td valign="top" align="left"><b>Properties editor for .options </b></td>
    <td valign="top"><p>The standard properties file editor is now used for <code>.options</code> files in the workspace.</p>
        <p><img src="images/options-editor.png" alt="Property file editor"></p></td>
  </tr>
  <tr id="pde.product.editor">
    <td valign="top" align="left"><strong>Product editor enhancements </strong></td>
    <td valign="top">The product editor has been enhanced to support   bundle start levels and product license information. </td>
  </tr>
  <tr id="pde.productosgi">
    <td valign="top" align="left"><b>Product definition enhancements</b></td>
    <td valign="top"><p>You can now initialize product definitions from OSGi launch configurations.</p></td>
  </tr>
  <tr id="pde.nl.fragments">
    <td valign="top" align="left"><b>NL fragment generation </b></td>
    <td valign="top"><p>A new wizard (<strong>PDE Tools -&amp; Internationalize...</strong>) supports the generation of NL fragments for plug-ins in the workspace. A project is generated for each selected plug-in containing skeleton properties files for each selected locale. The generated properties files contain the keys from each of the associated plug-in's properties files.</p>
        <p><img src="images/nl-fragments.png" alt="Wizard to generate NL fragments" ></p></td>
  </tr>
  <tr id="pde.menuspy">
    <td valign="top" align="left"><b>Plug-in Spy and menus</b></td>
    <td valign="top"><p>View information about menus by invoking Plug-in Spy 
      in menu introspection mode (<b>Alt+Shift+F2</b>) and selecting a menu item.
      </p>
        <p><img src="images/menuspy.png" alt="Menu Spy"></p></td>
  </tr>
  <tr id="registryview">
    <td align="left" valign="top"><b>Plug-in Registry view enhancements </b></td>
    <td valign="top">The <b>Plug-in Registry</b> view now supports 
      browsing for OSGi services.
      <p><img src="images/pde-registryview.png" alt="Browse for OSGi services using the registry view" ></p></td>
  </tr>
  <tr id="launch-config-startLevels">
    <td valign="top" align="left"><b>Start levels</b></td>
    <td valign="top">Eclipse Application launch configurations now support start 
      levels and auto-start settings. You can specify default start levels and auto-start 
      settings for all plug-ins in the configuration, and provide specific settings for others 
      by selecting the plug-in in the list.
      <p><img src="images/start-levels.png" alt="Use the Plug-ins tab to specify start levels" ></p></td>
  </tr>
  <tr id="junit-nonUIThread">
    <td valign="top" align="left"><b>JUnit plug-in tests in non-UI thread</b></td>
    <td valign="top">You can now launch JUnit Plug-in tests in a non-UI thread. A 
      check box has been added to the Test tab to specify whether tests should run in the UI thread.
      <p><img src="images/non-ui-thread.png" alt="Check box for non-UI thread"></p></td>
  </tr>
  <tr id="pde.fragments">
    <td valign="top" align="left"><b>Fragments in the Plug-in Registry view</b></td>
    <td valign="top"><p>The Plug-in Registry view now includes fragments. Simply expand a plug-in, and expand
      the <b>Fragments</b> element in the tree to see all available fragments of that plug-in.
      </p>
        <p><img src="images/registryfragments.png" alt="Fragments"></p></td>
  </tr>
  <tr>
    <td colspan="2"><h2><a name="Export">Export </a></h2></td>
  </tr>
  <tr id="exportInstall">
    <td valign="top" align="left"><b> Install  into running platform</b></td>
    <td valign="top"><p>It's simple to run and test your latest code by exporting and install plug-ins and features directly into the running workbench. Choose <strong>Install into host</strong> when exporting and 
      specify a path in the local file system where exported artifacts can be stored (repository). You will be prompted to restart your 
      workspace after export and install is complete. </p>
        <p><img src="images/click-install.png" alt="Export Wizard"></p>
      <p>Patched plug-ins will appear in the installed software list and can also be uninstalled.</p>
      <p><img src="images/installed.png" alt="Installation Details Dialog"></p>    </td>
  </tr>
  <tr id="pde-binary-cycles">
    <td valign="top" align="left"><b>Source bundles, binary cycles, and  workspace class files </b></td>
    <td valign="top"><p>Export options have been enhanced:</p>
      <ul>
        <li>Generate source bundles. Select the <b>Export source</b> option and choose <b>Generate 
        source bundles</b> from the drop down menu. A source bundle will be exported for each 
      plug-in being exported. </li>
        <li>Export features, plug-ins, and products with binary cycles. 
          Binary cycles are cycles that exist in your target platform, not your workspace. This option is on by default.</li>
        <li>Export existing class files from the workspace. When this option is checked, PDE will re-use existing class files in the workspace rather than compiling class files from source during export.</li>
      </ul>
    <p><img src="images/export-options.png" alt="Export Wizard Options Tab"></p></td>
  </tr>
  <tr id="pde.feature.categories">
    <td valign="top" align="left"><strong>Publish feature categories</strong></td>
    <td valign="top"><p>The new <strong>Category Definition</strong> editor can be 
      used to assign categories to features when exporting. The category names and 
      descriptions will then appear in software selection dialogs. First, create a category 
      definition file via <strong>File &gt; New &gt; Other...</strong> and select<strong> Plug-in Development &gt; Category Definition.</strong> Define categories with 
      symbolic identifiers, names, and descriptions, and then add features to each category.
      </p>
        <p><img src="images/categorydef.png" alt="Category Definition editor" ></p>
      <p>When exporting your feature, specify the category file to apply when exporting 
        via the <strong>Options</strong> tab. </p>
      <p><img src="images/categoryexport.png" alt="Specify category file on export" ></p>
      <p>The categories can then be seen when browsing the repository from the Install Software dialog.</p>
      <p><img src="images/installcategory.png" alt="Install new software dialog displays exported categories"></p></td>
  </tr>
  <tr id="pde.keypass">
    <td valign="top" align="left"><b>Keypass support</b></td>
    <td valign="top"><p>The JAR signing support in PDE has been expanded to include support for keypasses.
      </p>
        <p><img src="images/keypass.png" alt="Keypass support"></p></td>
  </tr>
  <tr>
    <td colspan="2"><h2><a name="APITooling">API Tooling </a></h2></td>
  </tr>
  <tr id="apiOptions">
    <td valign="top" align="left"><b>Compatibility options </b></td>
    <td valign="top"><p>API compatibility options have been reorganized and descriptions have been improved. The number of options has been reduced by combining related problems. For example, problems related to type parameters 
      are now in their own group rather than being listed separately in the settings for classes, interfaces, and methods. </p>
      <p>As well, you can be alerted to breaking API changes even if you have incremented the major version of your plug-in. The first time you change a plug-in's API in an incompatible way, problems inform you to increment the major version of your plug-in. Once you increment the major version of your plug-in, API tooling allows additional breaking API changes without warning. Use the new preference <strong>Report API breakage even if authorized by major version increment</strong> to enable this feature (on the <strong>Plug-in Development &gt; API Errors/Warnings</strong> preference page, on the <strong>API Compatibility</strong> tab). When this preference is enabled you must use API problem filters to selectively permit incompatible API changes.</p>
      <p><img src="images/err-warn.png" alt="Preferences &gt; Plug-in Development &gt; API Errors/Warnings" ></p></td>
  </tr>
  <tr id="api.noextend">
    <td valign="top" align="left"><b>@noextend restriction supported on interfaces</b></td>
    <td valign="top"><p>API tooling now supports two restrictions on interfaces: <code>@noimplement</code> and <code>@noextend</code>. This allows an interface to be 
      extended when it is not intended to be implemented directly. For example, a client may 
      be permitted to subclass an existing implementation of a <code>@noimplement</code> interface and extend the base interface with extra function.</p>
        <p>Component owners should decide where to add <code>@noextend</code> tags on existing interfaces, as this was previously implicit. To maintain the API contracts 
          specified in 3.4, <code>@noextend</code> tags can be added to all interfaces 
          specified as <code>@noimplement</code>. In some cases the <code>@noextend</code> restriction can be omitted, as clients that extend and implement a <code>@noimplement</code> interface will still be flagged with errors. However, if you would like to reserve the 
          right to add constants to an API interface in the future, you must add the <code>@noextend</code> tag. This is because adding a field to an interface is binary 
          incompatible if clients can extend or implement an interface (see <a href="http://wiki.eclipse.org/Evolving_Java-based_APIs_2#Evolving_API_Interfaces">Evolving API Interfaces</a>).<br>
      </p></td>
  </tr>
  <tr id="systemLibrary">
    <td valign="top" align="left"><b>System library validation</b></td>
    <td valign="top">API tools can now analyze use of system libraries and create 
      problems when code accesses members that may not be present at runtime. 
      For example, when a plug-in specifies a required execution environment of J2SE 1.3, 
      but the only JRE installed in the workspace for building is J2SE 1.5, it is possible to 
      access methods that exist in J2SE 1.5, but not in J2SE 1.3. In order for the validation to work, 
      you must install relevant execution environment descriptions from an update site.
      <p><img src="images/ee-validation-pref.png" alt="API Errors/Warnings preference page"></p>
      <p>The <strong>API Use</strong> tab of the <strong>API Errors/Warnings</strong> preference page displays installed execution environments. 
        Use the &quot;install them now&quot; hyperlink to install additional environments 
        via the software updates dialog.</p>
      <p><img src="images/ee-validation.png" alt="Illegal access warning"></p></td>
  </tr>
  <tr id="api.stale.filters">
    <td valign="top" align="left"><b>Stale  problem filters </b></td>
    <td valign="top"><p>API tooling creates warnings for problem filters that are no longer needed. API problem filters often become stale because they are used to filter known incompatibilities between two specific releases. A quick fix is available to remove stale filters. </p>
        <p><img src="images/filter-quick-fix.png" alt="Quick fix to remove stale filters"></p></td>
  </tr>
  <tr id="api.ant.tasks">
    <td valign="top" align="left"><b>Ant tasks </b></td>
    <td valign="top"><p>Ant tasks to perform API analysis and generate simple HTML reports are now available. These are the same Ant tasks used in the Eclipse SDK build. Documentation for each task is available in the <strong>Reference</strong> section of the <strong>Plug-in Development Environment Guide</strong>.</p>        </td>
  </tr>
  <tr id="pde.api.compare">
    <td valign="top" align="left"><b>Compare APIs</b></td>
    <td valign="top"><p>You can now view API changes relative to an API baseline. Select a project or 
      package in the Package Explorer and choose <strong>Compare With &gt; API Baseline</strong>. 
      Specify the API baseline you wish to compare against and press <strong>OK</strong>. 
      The API Tooling view will summarize the API changes.
      </p>
          <p><img src="images/apichanges.png" alt="API Tooling view" width="389" height="265" ></p></td>
  </tr>
  <colgroup>
  <col width="20%">
  <col width="80%">
  </colgroup>
  <tbody>
  <tr>
    <td colspan="2"><h2><a name="Build">Build </a></h2></td>
  </tr>

  <tr id="flattenDependencies">
    <td width="30%" valign="top" align="left"><b>Sort plug-ins across feature boundaries</b></td>
    <td width="70%" valign="top"><p>PDE/Build determines compilation order by sorting 
    	plug-ins according to their dependencies. Previously, this sorting was only done within 
    	a single feature and features were compiled depth first in the order they were included.</p>
        Set the property:
        <div align="center"><pre>flattenDependencies=true</pre></div>
        in your build's configuration, and PDE/Build will instead sort plug-ins across feature boundaries.  
        This allows you to structure your features according to the best logical groupings 
        without restrictions imposed by compilation requirements. 	</td>
  </tr>

  <tr id="parallelCompilation">
    <td width="30%" valign="top" align="left"><b>Parallel compilation</b></td>
    <td width="70%" valign="top"><p>If plug-ins are sorted across feature boundaries (see above), 
    PDE/Build can also group plug-ins allowing for parallel compilation.</p>
    Set the property:
    <div align="center"><pre>parallelCompilation=true</pre></div>
    in your build's configuration, and PDE/Build will group plug-ins for parallel compilation 
    using Ant's <tt>&lt;parallel&gt;</tt> task.  Setting the properties <tt>parallelThreadCount</tt> 
    and <tt>parallelThreadsPerProcessor</tt> will control the corresponding attributes on the parallel task.    </td>
  </tr>
  <tr id="publish_p2">
    <td valign="top" align="left"><b>Build integration with p2</b></td>
    <td valign="top">PDE/Build has updated integration with p2.  It is now
      able to publish metadata directly from your source instead of generating it based 
      on binary jars.  For an existing feature or product build, set the property:
      <pre>
           p2.gathering = true
     </pre>
        <p>Setting this property will use the p2 publisher to gather up your bundle and publish it into a 
          build specific repository.</p>
      <p>For product builds, this will automatically perform a director install to create the final product archives.  
        If you also set the <tt>p2.metadata.repo</tt> and <tt>p2.artifact.repo</tt> properties then build will mirror the 
        resulting product metadata into those repositories.</p>
      <p>For Feature builds, this will create a p2 repository for the final archive.  This also has the effect of setting <tt>groupConfigurations=true</tt> and <tt>outputUpdateJars=true</tt>.</p></td>
  </tr>
  <tr id="rootfile_artifacts">
    <td valign="top" align="left"><b>Feature rootfile artifacts</b></td>
    <td valign="top">When publishing metadata directly from source using the <tt>p2.gathering=true</tt> property, 
      root files contributed by features will be published into the artifact repository and associated metadata will be created.
      The result is that installing your feature will also cause the feature's root files to be installed.</td>
  </tr>
  <tr id="product_qualifiers">
    <td valign="top" align="left"><b>Qualifier replacement on .product files</b></td>
    <td valign="top"><p>PDE/Build will now replace the ".qualifier" on the version specified in a .product file used
      in a product build.  Set the property <b><tt>p2.product.qualifier</tt></b> to be the qualifier you wish to use.
      </p>
        <p>If no value is specified, the default will be either the value of <tt>forceContextQualifier</tt> or the default timestamp.</p>    </td>
  </tr>

  <tr id="pde-build-fetch">
    <td width="30%" valign="top" align="left"><b>Fetch artifacts for your build using p2</b></td>
    <td width="70%" valign="top">
      A new extension has been added to PDE/Build that enables users to fetch
    	artifacts from p2 repositories. You can now add an entry to your map
    	file for build input and PDE/Build will retrieve the artifact and include it in the build.
    	<p>
    	The map file entry needs to include the id and version of the installable unit (IU), and
    	the URI of the repository where the IU can be found. The metadata and 
    	artifact repositories are assumed to be co-located. An example is:</p>
    	<p>
    	<code>
    		plugin@my.bundle.id,1.0.0=p2IU,id=my.bundle.id,version=1.0.0,repository=http:/example.com/repo    	</code>    </p>	</td>
  </tr>

  <tr id="repo2runnable">
    <td width="30%" valign="top" align="left"><b>p2 repositories as a target for PDE Build</b></td>
    <td width="70%" valign="top"><p>
    	You can now specify a location that contains local p2 repositories in nested folders or zip files.
    	The build will automatically transform the repositories into a form that PDE/Build can 
    	compile against.</p>
    	<p>
    	There is a new <tt>processRepos</tt> phase in the main build script with corresponding
    	<tt>pre</tt> and <tt>post</tt> targets in the <tt>customTargets.xml</tt> file.</p>
    	<p>
    	You must set these properties in the <tt>build.properties</tt> for your builder. The
    	<tt>repoBaseLocation</tt> is the location of the folder containing the local p2 
    	repositories. The <tt>transformedRepoLocation</tt> is the location where the transformed
    	artifacts will be placed after being processed.</p>
    	<p>
    	<code>
    	repoBaseLocation=${base}/repos<br>
		transformedRepoLocation=${base}/transformedRepos		</code>		</p>	</td>
	</tr>
  <tr>
    <td colspan="2"><h2><a name="TargetPlatform">Target Platform </a></h2></td>
  </tr>

  <tr id="pde.target.platform">
    <td width="30%" valign="top" align="left"><strong>Target platform and target definitions </strong></td>
    <td width="70%" valign="top"><p>The target platform preference page (<strong>Preferences
     &gt; Plug-in Development &gt; Target Platform</strong>) has been redesigned. The page allows the user to select the active target platform from all target 
     definitions in the workspace. 
     Target definitions can be created and edited from this page using a wizard or with the target definition editor. You can quickly switch 
     between targets using the checkboxes. Targets can be composed of plug-ins originating from installations, directories, features, and software sites. See <a href="../concepts/target.htm">target definition concepts</a> for more details on crafting targets. </p>
      <p><img src="images/target-platform.png" alt="Target platform preference page"></p></td>
  </tr>
  <tr id="targetEditor">
    <td valign="top" align="left"><b>Target editor enhancements</b></td>
    <td valign="top">The target editor has been enhanced to support new features 
      in target definitions. Targets now support installation-based locations in addition to 
      directories and features. As well, the editor support retrieval of plug-ins from update 
      sites. The wizards used to add content to a target definition are the same as 
      described in the new target platform preference page (above).
      <p><img src="images/target-editor.png" alt="Target Definition Editor"></p>
      <p>To support new features, the underlying target file format has been enhanced. 
        The new editor continues to read old target files, but only writes files in the new format.</p></td>
  </tr>

  <tr id="pde.target.state">
    <td width="30%" valign="top" align="left"><b>Target platform state</b></td>
    <td width="70%" valign="top"><p>The new <strong>Target Platform State</strong> 
    view displays all the bundles used to build, run and debug plug-ins with. The state is 
    built from the active target definition.</p>
    <p><img src="images/targetstateview.png" alt="Target Platform State view" ></p></td>
  </tr>
  </tbody>
</table>
</body>
</html>
