<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<LINK REL="STYLESHEET" HREF="../book.css" CHARSET="ISO-8859-1" TYPE="text/css">
<title>Component build configuration</title>
</head>

<BODY BGCOLOR="#ffffff">

<h3>Build configuration</h3>

<p>The feature build mechanism is driven by a build configuration.&nbsp; The
build configuration for an individual plug-in, fragment, or feature is found
in a <b> build.properties</b> file for the corresponding element.</p>

<p>PDE project creation wizards generate the <b> build.properties</b> file when
projects in question are created. The file contains information on how to compile source folders into
JARs. This information can be indirectly updated in the Runtime page of the
manifest editor. It can also be directly modified using the appropriate editor.</p>

<p>PDE provides a simple editor for the <b> build.properties</b> that has form and source views.
The file itself follows the Java properties format. You need to provide a number of
keys and their corresponding values. Multiple values are separated using a comma
as the delimiter. </p>

<p>The most important keys to provide are those for mapping of source folders
into run-time libraries. They will drive the build process and control where to
find source code to compile and how to package it into the libraries. The keys
are in form &quot;<b>source.&lt;library&gt;</b>&quot; (e.g. <b>source.xyz.jar</b>),
while values are comma-separated source folders. </p>

<p > In addition, there are seven points where text can be specified by a plug-in or fragment for inclusion in the
build.&nbsp;  These points are: 
 
 </p>
<ul>
  <li><b>bin.includes</b> - lists files to include in the binary build
</li>
  <li><b>bin.excludes</b> - lists files to exclude from the binary build
</li>
  <li>
<b>
src.includes</b> - lists files to include in the SDK-type build (binary+sources)</li>
  <li>
 <b>
 src.excludes</b> - lists files to exclude from the SDK-type build</li>
  <li>
 <b>custom=true</b> - indicates that the build script is hand-crafted as opposed
 to automatically generated</li>
  <li>
 <b>jars.extra.classpath</b> - extra classpaths used to make automated build easier. Classpath can either be relative paths, or
platform urls refering to plugins and fragments of your development environment (e.g. ../someplugin/xyz.jar, platform:/plugins/org.apache.ant/ant.jar).
If you use those build files in external build processes, refrains from using platform urls, or complement them 
with relative paths.</li>
  <li>
 <b>jars.build.order</b> - defines order in which jars should be compiled (in
 case there are multiple libraries)</li>
</ul>
<p  > The values
defined in these points are expressed as Ant "patterns". Typically this amounts to a comma-separated list of strings
to match.  
 </p>
<p  >Standard formats give the
expected results.&nbsp; For example, &quot;*<b>.jar</b>&quot; indicates all jar files in the top level
directory.
</p>
<p  >The patterns are
not deep by default.&nbsp; If you want to
describe all Java files for example, you should use the pattern "<b>**/*.java</b>".&nbsp;&nbsp;
The pattern "<b>**</b>" matches any number of directory levels.&nbsp;
Similarly, to describe whole subtrees, use "<b>xyz/</b>".
 </p>
<p  >&nbsp;
 </p>
<p>&nbsp;<br>
<a href="../hglegal2003.htm">
<img src = "../images/ngibmcpy2003.gif" alt="Copyright IBM Corporation and others 2000, 2003" border="0" width="324" height="14"></a>
</p>

</body>

</html>
