<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Plug-in Project Structure</title>
<link href="../../book.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
.style1 {
	font-size: 18px;
	font-weight: bold;
}
.style2 {
	font-size: 12pt;
	font-weight: bold;
}
-->
</style>
</head>

<body>
<p class="style1">Plug-in Project Structure</p>
<p>The <strong>Project Structure</strong> wizard page allows you specify the project name, location,  settings and target. </p>
<p><img src="../../images/new_wizards/plugin_structure.PNG" alt="Plug-in Project Structure" hspace="30"></p>
<p>&nbsp;</p>
<p class="style2">Project Name </p>
<p>When choosing a name for the plug-in project, the reverse naming domain convention (e.g. com.example.abc) is recommended but not enforced by PDE.</p>
<p>&nbsp;</p>
<p class="style2">Project Location </p>
<p>The default location for the plug-in project is a  subdirectory nested inside the workspace location. To change the location, uncheck the <strong>Use default location</strong> checkbox and enter the location of your choice.</p>
<p>&nbsp;</p>
<p class="style2">Project Settings </p>
<p>Whether or not a plug-in project should be created as a Java project depends on whether the plug-in will contribute code. Most plug-ins do contribute code and should therefore be housed inside a Java project. Other plug-ins, such as documentation plug-ins do not contribute code and can therefore be contained in simple projects.</p>
<p>&nbsp;</p>
<p class="style2">Eclipse vs. OSGi Framework </p>
<p>The Eclipse vs. OSGi framework choice controls the code generation options available on the <a href="plugin_content.htm">Plug-in Content</a> page as well as the list of <a href="plugin_templates.htm">templates</a> available. </p>
<p>Eclipse plug-ins are OSGi bundles that use the Eclipse extension registry. Most Eclipse plug-ins do use this registry, which is available in the runtime layer, and that is why the <strong>Eclipse target</strong> is selected by default. </p>
<p>If you do not intend to use the extension registry, then you should use the <strong>OSGi framework</strong> option. With this option, you would not end up with dependencies on the runtime layer as PDE would restrict the templates available to you and the code generated for you to the OSGi layer. </p>
<p>&nbsp;</p>
<p class="style2">Equinox vs. Standard</p>
<p>When targetting an OSGi framework, you have a choice between the <strong>Equinox</strong> and <strong>standard</strong> frameworks. The Equinox OSGi framework augments the <em>MANIFEST.MF</em> content with Eclipse-specific headers (e.g. <strong>Eclipse-LazyStart</strong>) and directives (e.g. <strong>x-friends</strong>). If you do not wish to use this Eclipse-specific headers and attributes, then choose the <strong>standard</strong> option. </p>
<p>&nbsp; </p>
<p>&nbsp;</p>
</body>

</html>
