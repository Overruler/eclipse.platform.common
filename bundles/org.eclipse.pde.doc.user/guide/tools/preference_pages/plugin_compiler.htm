<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Plug-in Compiler Preferences</title>
<link href="../../book.css" rel="stylesheet" type="text/css">
<script type="text/javascript" language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<style type="text/css">
<!--
.style1 {
	font-size: 18px;
	font-weight: bold;
}
.style2 {
	font-size: 12pt;
	font-weight: bold;
}
.style3 {
	font-size: 10pt;
	font-weight: bold;
	text-decoration: underline
}
-->
</style>
</head>

<body>
<p class="style1">Plug-in Compiler Preferences</p>
<p>Syntactic errors in <em>plugin.xml</em>, <em>fragment.xml</em> and <em>MANIFEST.MF</em> are all flagged as errors by the plug-in manifest compiler. As for semantic problems in the plug-in manifests, the severity for each problem category can be set to <em>Error</em>, <em>Warning</em> or <em>Ignore</em>. </p>
<p>&nbsp;</p>
<p class="style2">Workspace vs. Project Settings </p>
<p>The plug-in compiler preferences are set at a workspace level on the 
<a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.pde.ui.CompilersPreferencePage)")'>
<img src="PLUGINS_ROOT/org.eclipse.help/command_link.png">
<strong>Window &gt; Preferences... &gt; Plug-in Development &gt; Compilers</strong></a>
preference page and take effect on all plug-in projects in the workspace. </p>
<p>It is also possible to override the workspace-scope settings by having compiler settings at the plug-in project level. To do so, select <strong>Properties</strong> from the context menu of a plug-in project. In the <strong>Properties</strong> dialog, project-level manifest compiler settings can be customized on the <strong>Plug-in Development &gt; Plug-in Manifest Compiler</strong> preference page.</p>
<p>&nbsp; </p>
<p class="style2">Semantic Problems </p>
<p>PDE validates <em>plugin.xml</em>, <em>fragment.xml</em>, <em>MANIFEST.MF</em> and <em>build.properties</em> files to flag a variety of potential problems that may prevent the plug-in from running properly. </p>
<p>Note that some problems such as a missing plug-in ID, plug-in version, or plug-in name render a plug-in invalid. Therefore, these problems are flagged with a non-negotiable error marker and are not available for configuration on this preference page. </p>
<p><img src="../../images/preferences/compilers_plugin.png" alt="Plug-in Compiler Options" hspace="30"></p>
<p>The following is a brief explanation for some of the non-obvious potential problems that are flagged by PDE: </p>
<ul>
  <li><div class="style3">Unresolved Dependencies:</div> An unresolved dependency is a dependency on a plug-in (in the <strong>Require-Bundle</strong> <em>MANIFEST.MF</em> header) or on a package (in the <strong>Import-Package</strong> <em>MANIFEST.MF</em> header) where the plug-in or package in question does not exist.</li>
  <li><div class="style3">Incompatible Environment:</div> A plug-in or fragment has an incompatible environment if it has an <strong>Eclipse-PlatformFilter</strong> <em>MANIFEST.MF</em> header whose value is not compatible with the current Target Environment settings as they appear on the <strong>Plug-in Development &gt; Target Platform &gt; Environment</strong> preference page.</li>
  <li><div class="style3">Unresolved Extension Points:</div> An unresolved extension point is an extension point that does not exist or whose contributing plug-in is unchecked on the <strong>Plug-in Development &gt; Target Platform</strong> preference page. Extensions contributing to such an extension point are flagged. </li>
</ul>
<p>&nbsp; </p>
</body>
</html>
