<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Plug-in Export</title>
<script language="JavaScript" type="text/javascript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<link href="../../book.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
.style1 {
	font-size: 18px;
	font-weight: bold;
}
.style2 {
	font-size: 12pt;
	font-weight: bold;
}
-->
</style>
</head>

<body>
<p class="style1">Plug-in Export</p>
<p>PDE provides a <strong>Plug-in Export</strong> wizard to export plug-ins and fragments into a form that is suitable for deployment. The wizard shields you from Ant scripts and does not pollute your workspace with resources generated during the build operation. The wizard is available under <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.file.export(exportWizardId=org.eclipse.pde.ui.pluginExportWizard)")'>
<img src="PLUGINS_ROOT/org.eclipse.help/command_link.png">
<strong>File &gt; Export... &gt; Plug-in Development &gt; Deployable plug-ins and fragments</strong>
</a>. </p>
<p>&nbsp;</p>
<p class="style2">Plug-in Selection </p>
<p>The wizard displays all the non-binary plug-ins found in the workspace. </p>
<p><img src="../../images/export_wizards/plugin_available.png" alt="Plug-ins" hspace="30"></p>
<p>Select the plug-ins that you want to export. If you find yourself exporting the same set of plug-ins over and over, you can press <strong>Working Set...</strong> to define a <em>plug-in working set</em>. </p>
<p>&nbsp;</p>
<p class="style2">Destination</p>
<p>You can choose to export the plug-ins to a directory or to a ZIP archive. </p>
<p><img src="../../images/export_wizards/destination_plugins.png" alt="Destination" hspace="30"></p>
<p>If you choose to export to a <strong>Directory</strong> (the default), the plug-ins will be placed in a <em>plugins/</em> subdirectory of the chosen directory.</p>
<p>If you choose to export to an <strong>Archive File</strong>, all the plug-ins will be packaged in a single ZIP archive. The directory structure inside the ZIP also starts with <em>plugins/</em> at its root. </p>
<p>&nbsp;</p>
<p class="style2">Options</p>
<p><img src="../../images/export_wizards/options_plugins.png" alt="Options" hspace="30"></p>
<p>The <strong>Include source code</strong> option results in the exporting of source code as well as binaries. If a plug-in is packaged as a JAR, the source code will be placed in a <em>src/</em> folder at the root of the JAR. If the plug-in is packaged as a flat directory, the source code will be placed in a source ZIP inside the plug-in directory as a sibling to the library JAR. Refer to the <a href="../preference_pages/source_code_locations.htm">Source Code Locations</a> document for details on the source archive naming convention. </p>
<p>The <strong>Package as individual JAR archives</strong> option packages each plug-in as a JAR. This option is recommended for plug-ins whose code is stored at the root (i.e. plug-ins that have no <EM>MANIFEST.MF</EM> <STRONG>Bundle-ClassPath</STRONG> header or the header is of the form <STRONG>Bundle-ClassPath: .</STRONG>). Nested JARs are strongly discouraged as they hinder performance; since, the runtime will have to extract these JARs at runtime. Therefore, if the plug-in's code is packaged in a JAR, it is recommended to keep the deployed plug-in as a flat directory.</p>
<p>The <strong>Save as Ant script</strong> option lets you save the settings of the export operation so that it can be re-executed at a later time without having to go through the wizard again. Like the export operation, the Ant task runs as an asynchronous job; therefore, it may not be suitable to incorporate it as a part of a larger Ant script. </p>
<p>&nbsp;</p>
<p class="style2">JAR Signing </p>
<p>The <strong>JAR Signing</strong> tab is only available when the <strong>Package as individual JAR archives</strong> option is selected on the <strong>Options</strong> tab. </p>
<p><img src="../../images/export_wizards/jar_signing_plugins.png" alt="JAR Signing" hspace="30"></p>
<p>To sign the JARs, <em><strong>you must be running Eclipse with a full JDK, rather than just a JRE. </strong></em></p>
<p>The <strong>Keystore location</strong>, <strong>Alias</strong> and <strong>Password</strong> fields are all required  for the signing operation.</p>
<p>&nbsp;</p>
<p>&nbsp; </p>
</body>
</html>
