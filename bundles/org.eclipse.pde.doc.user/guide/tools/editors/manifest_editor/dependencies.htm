<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Dependencies</title>
<link href="../../../book.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
.style1 {
	font-size: 18px;
	font-weight: bold;
}
.style2 {
	font-size: 12pt;
	font-weight: bold;
}
-->
</style>
</head>

<body>
<p class="style1">Dependencies</p>
<p>The <STRONG>Dependencies</STRONG> page shows the dependencies that your   plug-in has on other plug-ins.&nbsp; You must list on this page all the plug-ins that   contribute code required on your plug-in project's classpath to compile.&nbsp;&nbsp; When   you modify the list of dependencies and save the file, PDE will automatically   update your classpath.</p>
<p>&nbsp;</p>
<p class="style2">Required Plug-ins </p>
<p>The <strong>Required Plug-ins</strong> section specifies dependencies on other plug-ins by explicitly enumerating these plug-ins. Your plug-in will not resolve or run at runtime if any of your plug-in dependencies are missing or unresolved. </p>
<p><img src="../../../images/plugin_editor/dependencies_required.png" alt="Require-Bundle" hspace="30"></p>
<p>Press the <strong>Add...</strong> button to see the list of all plug-ins that your plug-in may make a dependency on.</p>
<p>The order of the plug-ins in the list is important because it dictates the   classloading order at runtime, so use the <STRONG>Up</STRONG> and <STRONG>Down</STRONG> buttons to organize the list as appropriate.</p>
<p>You can set several properties on each plug-in dependency:</p>
<ul>
  <li>You can make the dependency <strong>optional</strong>, which would indicate to the runtime that your plug-in should run if this dependency happens to be missing.</li>
  <li>You  can <strong>re-export</strong> your dependency to make it automatically visible to any downstream plug-in that requires your plug-in. Note that you should only re-export a dependency if your plug-in exposes API from that dependency.</li>
  <li>You can specify the minimum and maximum version of the plug-in you require.</li>
</ul>
<p>&nbsp;</p>
<p class="style2">Imported Packages </p>
<p>The Eclipse runtime gives the flexibility to make a dependency on a package without explicitly identifying its originating plug-in. These packages are enumerated in the <strong>Imported Packages</strong> section. </p>
<p><img src="../../../images/plugin_editor/dependencies_imported.png" alt="Import-Package" hspace="30"></p>
<p>Press <strong>Add...</strong> to see the list of packages available to your plug-in for importing. PDE filters out packages contributed by plug-ins that are already on your plug-in classpath. </p>
<p>You can set several properties on each package dependency:</p>
<ul>
  <li>You can make the dependency <strong>optional</strong>, which would indicate to the runtime that your plug-in should run if this dependency happens to be missing.</li>
  <li>You can specify the minimum and maximum version of the package you require.</li>
</ul>
<p>&nbsp;</p>
<p class="style2">Automated Management of Dependencies </p>
<p>The <strong>Automated Management of Dependencies</strong> section provides a new flexible workflow that allows you to code your plug-in   first, and then have your code analyzed, and the list of plug-in dependencies   automatically generated for you by PDE after. </p>
<p><img src="../../../images/plugin_editor/dependencies_automated.png" alt="Automated Management" hspace="30"></p>
<p>Press the <strong>Add...</strong> button to add plug-ins to the list, which would  augment your development build path (and hence your   content assist scope).</p>
<p>These dependencies do not get added to the <em>MANIFEST.MF</em> file immediately, but you   can start coding right away as if they were.</p>
<p>At any time, you can tell PDE to analyze your code and generate the correct   dependencies in your <em>MANIFEST.MF</em> file via either the <strong>Require-Bundle</strong> or <strong>Import-Package</strong>   headers.</p>
<p>&nbsp;</p>
<p class="style2">Dependency Analysis</p>
<p align="left">The <strong>Dependency Analysis</strong> contain several useful features that help you examine and optimize your plug-in dependencies to make your plug-in run better. </p>
<p><img src="../../../images/plugin_editor/dependencies_analysis.png" alt="Dependency Analysis" width="343" height="125"></p>
<p>Since the JARs from all the plug-ins in the list of dependencies   will be on your plug-in runtime classpath, it is very important to not have   any dependencies that you do not need, as they would slow down classloading.&nbsp;<strong>Find Unused Dependencies</strong>, arguably the most valuable function provided, finds unused and redundant entries in the list of required plug-ins and imported packages and offers to remove them. </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>
</html>
